{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border:solid Chocolate 2px; padding: 40px\">\n",
    " \n",
    "<b> –£–ª—å—è–Ω–∞, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üëã</b>  \n",
    "\n",
    "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–∏—Ä–∏–ª–ª –í–∞—Å–∏–ª—å–µ–≤, —è –±—É–¥—É —Ä–µ–≤—å—é–µ—Ä–æ–º —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—â–∞—Ç—å—Å—è –Ω–∞ ¬´—Ç—ã¬ª, –Ω–æ –µ—Å–ª–∏ –ø—Ä–∏–≤—ã—á–Ω–µ–µ –Ω–∞ ¬´–≤—ã¬ª, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º! \n",
    "    \n",
    "–Ø –±—É–¥—É –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ç–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π –∏—Ö, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –≤ —Å–ª—É—á–∞–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.\n",
    "\n",
    "–¢—ã –º–æ–∂–µ—à—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –∏—Ö –≤ Markdown-—è—á–µ–π–∫–∞—Ö, —Ç–∞–∫ –∏ –≤—ã–¥–µ–ª–∏–≤ –∏—Ö —Ü–≤–µ—Ç–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, <font color='blue'>—Å–∏–Ω–∏–º</font>. –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±, –Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥, —É–¥–æ–±–Ω–µ–µ.\n",
    "\n",
    "–°–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —è –±—É–¥—É –æ–±–æ–∑–Ω–∞—á–∞—Ç—å <font color='green'>–∑–µ–ª–µ–Ω—ã–º</font>, <font color='gold'>–∂–µ–ª—Ç—ã–º</font> –∏ <font color='red'>–∫—Ä–∞—Å–Ω—ã–º</font> —Ü–≤–µ—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n",
    "  \n",
    "<br/>\n",
    "\n",
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º. –ó–¥–µ—Å—å –∂–µ —è –º–æ–≥—É –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n",
    "</div>\n",
    "\n",
    "<br/>\n",
    "\n",
    "<div class=\"alert alert-warning\">\n",
    "    <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "    \n",
    "<b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –ª—É—á—à–µ, –µ—Å–ª–∏ –≤–Ω–µ—Å—Ç–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã.\n",
    "</div>\n",
    "\n",
    "\n",
    "<br/>\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"></h2>\n",
    "\n",
    "    \n",
    "<b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>\n",
    " –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞, –µ—Å–ª–∏ —Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —à–∞–≥–∏.\n",
    "</div>\n",
    "<br/>\n",
    "<div class=\"alert alert-info\">\n",
    "–†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–ª—è —Ç–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–∏–π –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–æ –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –≤—ã–¥–µ–ª–µ–Ω—ã, —Ç–æ —ç—Ç–æ –º–Ω–µ –æ—á–µ–Ω—å –ø–æ–º–æ–∂–µ—Ç!\n",
    "</div>\n",
    "    \n",
    "–£–≤–∏–¥–µ–≤ —É —Ç–µ–±—è –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å, –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —è –ª–∏—à—å —É–∫–∞–∂—É –Ω–∞ –µ–µ –Ω–∞–ª–∏—á–∏–µ –∏ –¥–∞–º —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–º—É –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ–µ. –ù–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ç–≤–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å —Ç–∞–∫–∂–µ. –ù–æ –µ—Å–ª–∏ —Ç—ã –ø–æ–∫–∞ –Ω–µ —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π - –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —è –¥–∞–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "–ö–∏—Ä–∏–ª–ª, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å –±–æ–ª—å—à–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –≤—ã –º–µ–Ω—è –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏–º–∏ –Ω–µ–Ω—É–∂–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏. –î–ª—è –º–µ–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≥–æ, —á—Ç–æ —è —Å–¥–µ–ª–∞–ª–∞. –Ø –ø–µ—Ä–µ–ø–∏—à—É –ø—Ä–æ–µ–∫—Ç, –∫–∞–∫ —Å—á–∏—Ç–∞—é –Ω—É–∂–Ω—ã–º. –í —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–≤—å—é —è –ø—Ä–∏–Ω–∏–º–∞—é –¢–û–õ–¨–ö–û –ø—Ä–∏–Ω—è—Ç—ã–π –ø—Ä–æ–µ–∫—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –º–µ–Ω—è –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º. –í–æ–π–¥–∏—Ç–µ –≤ –º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç—ã –∏ –Ω–µ—Å—É—Ç –∏–∑—É—á–µ–Ω–∏–µ –∫–∞–∫–∏—Ö-—Ç–æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ –¥–ª—è –º–µ–Ω—è –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –°–≤–æ–∏–º —Ä–µ–≤—å—é –≤—ã —Ç–æ–ª—å–∫–æ –æ—Ç–±–∏–≤–∞–µ—Ç–µ –∂–µ–ª–∞–Ω–∏–µ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É, –ø—Ä–∏–π–º–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç —É–∂–µ –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–æ—Ç–æ—Ä—ã–º —è –µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª—é. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "üëç –£–ª—å—è–Ω–∞, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ-–ø–µ—Ä–≤—ã—Ö, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. \n",
    "    \n",
    "–ü–æ –ø—Ä–æ–µ–∫—Ç—É. –ó–∞ —á–∞—Å –≤—ã —Å–º–æ–≥–ª–∏ –µ–≥–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å, –∏–∑–º–µ–Ω–∏–≤ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ä–µ—à–µ–Ω–∏—è–º, —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—á—Ç–∏ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –Ø –æ–∫–∞–∑–∞–ª—Å—è –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–∏–ª–∫–æ–π, –¥–æ–ª–∂–µ–Ω –ª–∏ –Ω–∞—Å—Ç–∞–≤–∞—Ç—å –Ω–∞ —Ç–æ–º, —á—Ç–æ–±—ã –º—ã –¥–æ—Ä–∞–±–æ—Ç–∞–ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ —É–∂–µ –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–æ–≤—ã–π.\n",
    "    \n",
    "***\n",
    "    \n",
    "–î—É–º–∞—é, —Ä–∞–∑ —Ä–∞–±–æ—Ç–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞, —Ç–æ —Å—Ç–æ–∏—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ, —Ç–µ–º –±–æ–ª–µ–µ, —á—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —É–¥–æ–±–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–æ–π —Ç–µ—Ç—Ä–∞–¥–∫–æ–π, –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—è —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é. –ü—Ä–æ–µ–∫—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ —Å–¥–µ–ª–∞–Ω–Ω—ã–º, –æ–¥–Ω–∞–∫–æ –∏ –≤ –Ω–µ–º –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å. –Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç, –µ—Å–ª–∏ –≤ –Ω–µ–º –æ—Å—Ç–∞—é—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏. –≠—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –ø—Ä–∞–≤–∏–ª–∞–º –ü—Ä–∞–∫—Ç–∏–∫—É–º–∞.\n",
    "    \n",
    "***\n",
    "    \n",
    "–ù–∏–∂–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —á—Ç–æ–±—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–Ω—è–ª–∞ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –Ø —Ç–∞–∫–∂–µ –±—É–¥—É –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–µ–ª–µ–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏. –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏ ‚àí –Ω–µ —Ç–æ–ª—å–∫–æ –¥–æ–±–∏–≤–∞—Ç—å—Å—è –æ—Ç–ª–∏—á–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π, –Ω–æ –∏ —É–º–µ—Ç—å ¬´—Å—Ä–µ–∑–∞—Ç—å –æ—Å—Ç—Ä—ã–µ —É–≥–ª—ã¬ª –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –±—ã—Å—Ç—Ä–æ, –∏–∑–±–µ–≥–∞—è —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ—Å—Ç–∏ —Ä–∏—Å–∫–∏ –æ—à–∏–±–æ–∫. \n",
    "    \n",
    "–ù–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É ‚àí –¥–æ–≤–µ—Å—Ç–∏ –µ–≥–æ –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–º —Ñ–∞–π–ª–æ–º –≤ –±—É–¥—É—â–µ–º —Ä–µ–∑—é–º–µ.\n",
    "    \n",
    "***\n",
    "    \n",
    "–ü—Ä–æ—à—É –Ω–µ —É–¥–∞–ª—è—Ç—å –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –í—Å–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –ü—Ä–∞–∫—Ç–∏–∫—É–º–∞, –Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∏—Ö –Ω–µ –≤—Å–µ–≥–¥–∞ —É–¥–æ–±–Ω–æ.\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ! –ü—Ä–æ—Å—Ç–æ —è —É–¥–∞–ª–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —á—Ç–æ –±—ã–ª–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ —Å—Ç–∞—Ä–æ–º—É —Ä–µ—à–µ–Ω–∏—é, –ø–æ—ç—Ç–æ–º—É —Ä–µ—à–∏–ª–∞ –∏—Ö —É–±—Ä–∞—Ç—å, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É, –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö\" data-toc-modified-id=\"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</a></span></li><li><span><a href=\"#–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏\" data-toc-modified-id=\"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</a></span></li><li><span><a href=\"#–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º\" data-toc-modified-id=\"–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>–ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º</a></span></li><li><span><a href=\"#–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏\" data-toc-modified-id=\"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</a></span></li><li><span><a href=\"#–ß–µ–∫-–ª–∏—Å—Ç-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–∞\" data-toc-modified-id=\"–ß–µ–∫-–ª–∏—Å—Ç-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–∞-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>–ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞</a></span></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# –û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ò–∑ ¬´–ë–µ—Ç–∞-–ë–∞–Ω–∫–∞¬ª —Å—Ç–∞–ª–∏ —É—Ö–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—ã. –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –ù–µ–º–Ω–æ–≥–æ, –Ω–æ –∑–∞–º–µ—Ç–Ω–æ. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –ø–æ—Å—á–∏—Ç–∞–ª–∏: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö.\n",
    "\n",
    "–ù—É–∂–Ω–æ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, —É–π–¥—ë—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç. –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –±–∞–Ω–∫–æ–º. \n",
    "\n",
    "–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥–µ–ª—å —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º *F1*-–º–µ—Ä—ã. –ß—Ç–æ–±—ã —Å–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–≤–µ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫—É –¥–æ 0.59. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ *F1*-–º–µ—Ä—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n",
    "\n",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ—Ä—è–π—Ç–µ *AUC-ROC*, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ —Å *F1*-–º–µ—Ä–æ–π.\n",
    "\n",
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling](https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.utils import shuffle\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score, roc_auc_score, roc_curve, confusion_matrix\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.dummy import DummyClassifier\n",
    "\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "    \n",
    "<b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> \n",
    "\n",
    "–ó–¥–µ—Å—å –±—ã–ª–æ –±—ã –∏–¥–µ–∞–ª—å–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å <a href=\"https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html\">pep8</a> - –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫. \n",
    "\n",
    "–¢–∞–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π:    \n",
    "    \n",
    "`from sklearn.metrics import (\n",
    "    accuracy_score, \n",
    "    confusion_matrix, \n",
    "    f1_score, \n",
    "    precision_score,\n",
    "    recall_score,\n",
    "    roc_auc_score,\n",
    "    roc_curve\n",
    ")`\n",
    "    \n",
    "        \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/datasets/Churn.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RowNumber</th>\n",
       "      <th>CustomerId</th>\n",
       "      <th>Surname</th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Geography</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Exited</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>15634602</td>\n",
       "      <td>Hargrave</td>\n",
       "      <td>619</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>101348.88</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>15647311</td>\n",
       "      <td>Hill</td>\n",
       "      <td>608</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>41</td>\n",
       "      <td>1.0</td>\n",
       "      <td>83807.86</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>112542.58</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>15619304</td>\n",
       "      <td>Onio</td>\n",
       "      <td>502</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>8.0</td>\n",
       "      <td>159660.80</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113931.57</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>15701354</td>\n",
       "      <td>Boni</td>\n",
       "      <td>699</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>93826.63</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>15737888</td>\n",
       "      <td>Mitchell</td>\n",
       "      <td>850</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>43</td>\n",
       "      <td>2.0</td>\n",
       "      <td>125510.82</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>79084.10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n",
       "0          1    15634602  Hargrave          619    France  Female   42   \n",
       "1          2    15647311      Hill          608     Spain  Female   41   \n",
       "2          3    15619304      Onio          502    France  Female   42   \n",
       "3          4    15701354      Boni          699    France  Female   39   \n",
       "4          5    15737888  Mitchell          850     Spain  Female   43   \n",
       "\n",
       "   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
       "0     2.0       0.00              1          1               1   \n",
       "1     1.0   83807.86              1          0               1   \n",
       "2     8.0  159660.80              3          1               0   \n",
       "3     1.0       0.00              2          0               0   \n",
       "4     2.0  125510.82              1          1               1   \n",
       "\n",
       "   EstimatedSalary  Exited  \n",
       "0        101348.88       1  \n",
       "1        112542.58       0  \n",
       "2        113931.57       1  \n",
       "3         93826.63       0  \n",
       "4         79084.10       0  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 14 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   RowNumber        10000 non-null  int64  \n",
      " 1   CustomerId       10000 non-null  int64  \n",
      " 2   Surname          10000 non-null  object \n",
      " 3   CreditScore      10000 non-null  int64  \n",
      " 4   Geography        10000 non-null  object \n",
      " 5   Gender           10000 non-null  object \n",
      " 6   Age              10000 non-null  int64  \n",
      " 7   Tenure           9091 non-null   float64\n",
      " 8   Balance          10000 non-null  float64\n",
      " 9   NumOfProducts    10000 non-null  int64  \n",
      " 10  HasCrCard        10000 non-null  int64  \n",
      " 11  IsActiveMember   10000 non-null  int64  \n",
      " 12  EstimatedSalary  10000 non-null  float64\n",
      " 13  Exited           10000 non-null  int64  \n",
      "dtypes: float64(3), int64(8), object(3)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RowNumber</th>\n",
       "      <th>CustomerId</th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Exited</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10000.00000</td>\n",
       "      <td>1.000000e+04</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>9091.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.00000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5000.50000</td>\n",
       "      <td>1.569094e+07</td>\n",
       "      <td>650.528800</td>\n",
       "      <td>38.921800</td>\n",
       "      <td>4.997690</td>\n",
       "      <td>76485.889288</td>\n",
       "      <td>1.530200</td>\n",
       "      <td>0.70550</td>\n",
       "      <td>0.515100</td>\n",
       "      <td>100090.239881</td>\n",
       "      <td>0.203700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2886.89568</td>\n",
       "      <td>7.193619e+04</td>\n",
       "      <td>96.653299</td>\n",
       "      <td>10.487806</td>\n",
       "      <td>2.894723</td>\n",
       "      <td>62397.405202</td>\n",
       "      <td>0.581654</td>\n",
       "      <td>0.45584</td>\n",
       "      <td>0.499797</td>\n",
       "      <td>57510.492818</td>\n",
       "      <td>0.402769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.556570e+07</td>\n",
       "      <td>350.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>11.580000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2500.75000</td>\n",
       "      <td>1.562853e+07</td>\n",
       "      <td>584.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>51002.110000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5000.50000</td>\n",
       "      <td>1.569074e+07</td>\n",
       "      <td>652.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>97198.540000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>100193.915000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7500.25000</td>\n",
       "      <td>1.575323e+07</td>\n",
       "      <td>718.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>127644.240000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>149388.247500</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>10000.00000</td>\n",
       "      <td>1.581569e+07</td>\n",
       "      <td>850.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>250898.090000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>199992.480000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         RowNumber    CustomerId   CreditScore           Age       Tenure  \\\n",
       "count  10000.00000  1.000000e+04  10000.000000  10000.000000  9091.000000   \n",
       "mean    5000.50000  1.569094e+07    650.528800     38.921800     4.997690   \n",
       "std     2886.89568  7.193619e+04     96.653299     10.487806     2.894723   \n",
       "min        1.00000  1.556570e+07    350.000000     18.000000     0.000000   \n",
       "25%     2500.75000  1.562853e+07    584.000000     32.000000     2.000000   \n",
       "50%     5000.50000  1.569074e+07    652.000000     37.000000     5.000000   \n",
       "75%     7500.25000  1.575323e+07    718.000000     44.000000     7.000000   \n",
       "max    10000.00000  1.581569e+07    850.000000     92.000000    10.000000   \n",
       "\n",
       "             Balance  NumOfProducts    HasCrCard  IsActiveMember  \\\n",
       "count   10000.000000   10000.000000  10000.00000    10000.000000   \n",
       "mean    76485.889288       1.530200      0.70550        0.515100   \n",
       "std     62397.405202       0.581654      0.45584        0.499797   \n",
       "min         0.000000       1.000000      0.00000        0.000000   \n",
       "25%         0.000000       1.000000      0.00000        0.000000   \n",
       "50%     97198.540000       1.000000      1.00000        1.000000   \n",
       "75%    127644.240000       2.000000      1.00000        1.000000   \n",
       "max    250898.090000       4.000000      1.00000        1.000000   \n",
       "\n",
       "       EstimatedSalary        Exited  \n",
       "count     10000.000000  10000.000000  \n",
       "mean     100090.239881      0.203700  \n",
       "std       57510.492818      0.402769  \n",
       "min          11.580000      0.000000  \n",
       "25%       51002.110000      0.000000  \n",
       "50%      100193.915000      0.000000  \n",
       "75%      149388.247500      0.000000  \n",
       "max      199992.480000      1.000000  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ó–∞–º–µ—Ç–∏–º, —á—Ç–æ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏, –µ—Å—Ç—å —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–µ—à–µ–Ω–∏—è:\n",
    "\n",
    "- –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ö –Ω–µ –æ—á–µ–Ω—å –≤–µ–ª–∏–∫–æ(–æ–∫–æ–ª–æ 10%)\n",
    "\n",
    "- –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n",
    "\n",
    "- –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –Ω–∞ –º–µ–¥–∏–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# –Ø –æ—Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º\n",
    "df['Tenure'] = df['Tenure'].fillna(df['Tenure'].median())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2<a class=\"tocSkip\"></h2>\n",
    "  \n",
    "<b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>\n",
    " \n",
    "–ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∞ –Ω—É–ª–µ–º –Ω–∞–º –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç. –ú—ã –º–æ–≥–ª–∏ –±—ã —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±—ã –∑–Ω–∞–ª–∏, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ tenure (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞) –∫–∞–∫-—Ç–æ —Å–≤—è–∑–∞–Ω—ã —Å —Ç–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–∫–µ –Ω–µ–¥–∞–≤–Ω–æ. –ï—Å–ª–∏ –ø—Ä–æ–≤–µ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, —Ç–æ —É–≤–∏–¥–∏–º, —á—Ç–æ –Ω–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–∞–Ω–∫–∞, –Ω–∏ –ø–æ –¥—Ä—É–≥–∏–º –∫–æ—Å–≤–µ–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º –Ω–µ —Å–ª–µ–¥—É–µ—Ç, —á—Ç–æ —ç—Ç–∞ –≥–∏–ø–æ—Ç–µ–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–µ—Ä–Ω–∞. –¢–æ–≥–¥–∞ –º—ã –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫–µ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ –∏–ª–∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—à–∞ –∑–∞–º–µ–Ω–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –Ω–∞ –º–æ–¥–µ–ª—å –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏.\n",
    "    \n",
    "–ó–¥–µ—Å—å –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –Ω–∞ –ºe–¥–∏–∞–Ω—É:\n",
    "    \n",
    "`df['Tenure'] = df['Tenure'].fillna(df['Tenure'].median())`\n",
    "    \n",
    "–¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n",
    "    \n",
    "* –ó–∞–º–µ–Ω–∞ –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–∞—à–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π.\n",
    "* –ò—Å–ø–æ–ª—å–∑–≤–∞–Ω–∏–µ –°–∏–º–ø–ª–∏–º–ø—É—Ç–µ—Ä–∞ –∏–ª–∏ –∫–Ω–Ω-–∏–º–ø—É—Ç–µ—Ä–∞.\n",
    "* –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –≤ tenure.\n",
    "\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "–ò—Å–ø—Ä–∞–≤–∏–ª–∞. –î–∞–ª—å—à–µ —Ä–µ—à–µ–Ω–∏–µ —á—É—Ç—å –ø–æ–º–µ–Ω—è–ª–æ—Å—å, –Ω–æ –≤ –ª—É—á—à—É—é —Å—Ç–æ—Ä–æ–Ω—É.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #3 <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "üëç –û–∫, –∑–¥–µ—Å—å –≤—Å–µ –≤–µ—Ä–Ω–æ. –ü–æ—Å–º–æ—Ç—Ä–∏–º –¥–∞–ª—å—à–µ.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['France', 'Spain', 'Germany'], dtype=object)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Geography'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í—ã–≤–æ–¥\n",
    "\n",
    "- RowNumber ‚Äî —Å—Ç–æ–ª–±–µ—Ü –¥—É–±–ª–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –∏ –Ω–µ –Ω–µ—Å–µ—Ç—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ü–æ—ç—Ç–æ–º—É —Å—Ç–æ–ª–±–µ—Ü –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å\n",
    "- CustomerId ‚Äî —è–≤–ª—è–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –¥–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É –∑–Ω–∞—á–µ–Ω–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤) –∏ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç ‚Äî —Å—Ç–æ–±–ª–µ—Ü —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n",
    "- Surname ‚Äî —è–≤–ª—è–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—â–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Å–æ–¥–µ—Ä–∂–∏—Ç 2932 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–¥–∞–Ω–Ω—ã–µ kaggle), —á—Ç–æ —Å–∏–ª—å–Ω–æ —É—Å–ª–æ–∂–Ω—è–µ—Ç –∑–∞–¥–∞—á—É, –Ω–æ –Ω–µ –Ω–µ—Å–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –±—É–¥—É—â–µ–π –º–æ–¥–µ–ª–∏ ‚Äî —Å—Ç–æ–ª–±–µ—Ü –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n",
    "- CreditScore ‚Äî —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü.\n",
    "- Geography ‚Äî –≤—Å–µ–≥–æ 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è France', 'Spain', 'Germany' ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OHE / ordinal encoding\n",
    "- Gender ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ‚Äî OHE / ordinal encoding.\n",
    "- Age ‚Äî Exited ‚Äî —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–Ω—ã."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "üëç –ï—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ. –í –ø—Ä–∏–Ω—Ü–∏–ø–µ, –¥–∞–Ω–Ω—ã–µ —É –Ω–∞—Å —Ö–æ—Ä–æ—à–∏–µ, –∞–Ω–æ–º–∞–ª–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–µ—Ç. \n",
    "    \n",
    "–í—ã—à–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø—É—Å–∫–æ–≤.\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Geography</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Exited</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>619</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>101348.88</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>608</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>41</td>\n",
       "      <td>1.0</td>\n",
       "      <td>83807.86</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>112542.58</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>502</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>8.0</td>\n",
       "      <td>159660.80</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113931.57</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>699</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>93826.63</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>850</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>43</td>\n",
       "      <td>2.0</td>\n",
       "      <td>125510.82</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>79084.10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CreditScore Geography  Gender  Age  Tenure    Balance  NumOfProducts  \\\n",
       "0          619    France  Female   42     2.0       0.00              1   \n",
       "1          608     Spain  Female   41     1.0   83807.86              1   \n",
       "2          502    France  Female   42     8.0  159660.80              3   \n",
       "3          699    France  Female   39     1.0       0.00              2   \n",
       "4          850     Spain  Female   43     2.0  125510.82              1   \n",
       "\n",
       "   HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n",
       "0          1               1        101348.88       1  \n",
       "1          0               1        112542.58       0  \n",
       "2          1               0        113931.57       1  \n",
       "3          0               0         93826.63       0  \n",
       "4          1               1         79084.10       0  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–û–±–æ–∑–Ω–∞—á–∏–º –Ω–æ–≤—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º \"data_ml\" ‚Äî –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n",
    "#–£–¥–∞–ª–∏–º —Å—Ç–æ–ª–±—Ü—ã-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏—è –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ \n",
    "for_drop = ['RowNumber','CustomerId', 'Surname']\n",
    "df_ml = df.drop(for_drop, axis=1)\n",
    "df_ml.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "üëç –° —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ –≤—ã–±–æ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–µ–Ω. \n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 11)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ml.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Exited</th>\n",
       "      <th>Geography_Germany</th>\n",
       "      <th>Geography_Spain</th>\n",
       "      <th>Gender_Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>619</td>\n",
       "      <td>42</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>101348.88</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>608</td>\n",
       "      <td>41</td>\n",
       "      <td>1.0</td>\n",
       "      <td>83807.86</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>112542.58</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>502</td>\n",
       "      <td>42</td>\n",
       "      <td>8.0</td>\n",
       "      <td>159660.80</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113931.57</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>699</td>\n",
       "      <td>39</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>93826.63</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>850</td>\n",
       "      <td>43</td>\n",
       "      <td>2.0</td>\n",
       "      <td>125510.82</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>79084.10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CreditScore  Age  Tenure    Balance  NumOfProducts  HasCrCard  \\\n",
       "0          619   42     2.0       0.00              1          1   \n",
       "1          608   41     1.0   83807.86              1          0   \n",
       "2          502   42     8.0  159660.80              3          1   \n",
       "3          699   39     1.0       0.00              2          0   \n",
       "4          850   43     2.0  125510.82              1          1   \n",
       "\n",
       "   IsActiveMember  EstimatedSalary  Exited  Geography_Germany  \\\n",
       "0               1        101348.88       1                  0   \n",
       "1               1        112542.58       0                  0   \n",
       "2               0        113931.57       1                  0   \n",
       "3               0         93826.63       0                  0   \n",
       "4               1         79084.10       0                  0   \n",
       "\n",
       "   Geography_Spain  Gender_Male  \n",
       "0                0            0  \n",
       "1                1            0  \n",
       "2                0            0  \n",
       "3                0            0  \n",
       "4                1            0  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–µ—Ç–æ–¥–æ–º OHE, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –Ω–µ —Å–ª–æ–≤–∏—Ç—å –¥–∞–º–º–∏ –ª–æ–≤—É—à–∫—É\n",
    "df_ml = pd.get_dummies(df_ml, drop_first=True)\n",
    "df_ml.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\"  style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class=\"tocSkip\"> </h2>    \n",
    "\n",
    "üëç –ó–¥–µ—Å—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í –¥–∞–º–º–∏-–ª–æ–≤—É—à–∫—É –Ω–µ –ø–æ–ø–∞–ª–∏—Å—å.\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 12)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ml.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í—ã–≤–æ–¥ –í –Ω–æ–≤–æ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ —É–≤–µ–ª–∏—á–µ–ª–æ—Å—Ç –Ω–∞ 1 (—Å—Ç–∞–ª–æ 12) –°—Ç–æ–ª–±–µ—Ü Geography —Å–æ–¥–µ—Ä–∂–∞–ª 3 –∫–ª–∞—Å—Å–∞, Gender_Male 2 –∫–ª–∞—Å—Å–∞ ‚Äî –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–ª—å–∫–æ 2 –∏ 1 —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–º–∏-–ª–æ–≤—É—à–∫–∏."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–û–±—É—á - 60, –í–∞–ª–∏–¥ - 20, —Ç–µ—Å—Ç - 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#–†–∞–∑–¥–µ–ª–∏–º –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫\n",
    "features = df_ml.drop('Exited', axis=1)\n",
    "target = df_ml['Exited']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#–í–∞–ª–∏–¥ 60%\n",
    "features_train, features_validtest, target_train, target_validtest = train_test_split(features,\n",
    "                                                    target,\n",
    "                                                    train_size=0.6,\n",
    "                                                    random_state=12345)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#–í–∞–ª–∏–¥ –∏ —Ç–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ—Ä–æ–≤–Ω—É –ø–æ 20% –æ—Ç –æ–±—â–µ–π\n",
    "features_valid, features_test, target_valid, target_test = train_test_split(features_validtest,\n",
    "                                                    target_validtest,\n",
    "                                                    train_size=0.5,\n",
    "                                                    random_state=12345)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í—ã–≤–æ–¥ –ë—ã–ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –≤—ã–±–æ—Ä–∫–∏:\n",
    "\n",
    "- –û–±—É—á–∞—é—â–∞—è\n",
    "features_train target_train\n",
    "\n",
    "- –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è\n",
    "features_valid target_valid\n",
    "\n",
    "- –¢–µ—Å—Ç–æ–≤–∞—è\n",
    "features_test target_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Geography_Germany</th>\n",
       "      <th>Geography_Spain</th>\n",
       "      <th>Gender_Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7479</th>\n",
       "      <td>567</td>\n",
       "      <td>35</td>\n",
       "      <td>8.0</td>\n",
       "      <td>153137.74</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>88659.07</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3411</th>\n",
       "      <td>711</td>\n",
       "      <td>37</td>\n",
       "      <td>8.0</td>\n",
       "      <td>113899.92</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>80215.20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6027</th>\n",
       "      <td>850</td>\n",
       "      <td>44</td>\n",
       "      <td>3.0</td>\n",
       "      <td>140393.65</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>186285.52</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1247</th>\n",
       "      <td>512</td>\n",
       "      <td>24</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>37654.31</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3716</th>\n",
       "      <td>665</td>\n",
       "      <td>27</td>\n",
       "      <td>2.0</td>\n",
       "      <td>147435.96</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>187508.06</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CreditScore  Age  Tenure    Balance  NumOfProducts  HasCrCard  \\\n",
       "7479          567   35     8.0  153137.74              1          1   \n",
       "3411          711   37     8.0  113899.92              1          0   \n",
       "6027          850   44     3.0  140393.65              2          0   \n",
       "1247          512   24     6.0       0.00              2          1   \n",
       "3716          665   27     2.0  147435.96              1          0   \n",
       "\n",
       "      IsActiveMember  EstimatedSalary  Geography_Germany  Geography_Spain  \\\n",
       "7479               0         88659.07                  0                1   \n",
       "3411               0         80215.20                  0                0   \n",
       "6027               1        186285.52                  1                0   \n",
       "1247               0         37654.31                  0                0   \n",
       "3716               0        187508.06                  1                0   \n",
       "\n",
       "      Gender_Male  \n",
       "7479            1  \n",
       "3411            0  \n",
       "6027            1  \n",
       "1247            1  \n",
       "3716            0  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#–î–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–º scaler –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏\n",
    "numeric = ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "StandardScaler()"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "scaler.fit(features_train[numeric])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Geography_Germany</th>\n",
       "      <th>Geography_Spain</th>\n",
       "      <th>Gender_Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7479</th>\n",
       "      <td>-0.886751</td>\n",
       "      <td>-0.373192</td>\n",
       "      <td>1.082277</td>\n",
       "      <td>1.232271</td>\n",
       "      <td>-0.891560</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.187705</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3411</th>\n",
       "      <td>0.608663</td>\n",
       "      <td>-0.183385</td>\n",
       "      <td>1.082277</td>\n",
       "      <td>0.600563</td>\n",
       "      <td>-0.891560</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.333945</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6027</th>\n",
       "      <td>2.052152</td>\n",
       "      <td>0.480939</td>\n",
       "      <td>-0.737696</td>\n",
       "      <td>1.027098</td>\n",
       "      <td>0.830152</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.503095</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1247</th>\n",
       "      <td>-1.457915</td>\n",
       "      <td>-1.417129</td>\n",
       "      <td>0.354288</td>\n",
       "      <td>-1.233163</td>\n",
       "      <td>0.830152</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.071061</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3716</th>\n",
       "      <td>0.130961</td>\n",
       "      <td>-1.132419</td>\n",
       "      <td>-1.101690</td>\n",
       "      <td>1.140475</td>\n",
       "      <td>-0.891560</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.524268</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CreditScore       Age    Tenure   Balance  NumOfProducts  HasCrCard  \\\n",
       "7479    -0.886751 -0.373192  1.082277  1.232271      -0.891560          1   \n",
       "3411     0.608663 -0.183385  1.082277  0.600563      -0.891560          0   \n",
       "6027     2.052152  0.480939 -0.737696  1.027098       0.830152          0   \n",
       "1247    -1.457915 -1.417129  0.354288 -1.233163       0.830152          1   \n",
       "3716     0.130961 -1.132419 -1.101690  1.140475      -0.891560          0   \n",
       "\n",
       "      IsActiveMember  EstimatedSalary  Geography_Germany  Geography_Spain  \\\n",
       "7479               0        -0.187705                  0                1   \n",
       "3411               0        -0.333945                  0                0   \n",
       "6027               1         1.503095                  1                0   \n",
       "1247               0        -1.071061                  0                0   \n",
       "3716               0         1.524268                  1                0   \n",
       "\n",
       "      Gender_Male  \n",
       "7479            1  \n",
       "3411            0  \n",
       "6027            1  \n",
       "1247            1  \n",
       "3716            0  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏\n",
    "features_train[numeric] = scaler.transform(features_train[numeric])\n",
    "features_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Geography_Germany</th>\n",
       "      <th>Geography_Spain</th>\n",
       "      <th>Gender_Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8532</th>\n",
       "      <td>-0.699824</td>\n",
       "      <td>-0.373192</td>\n",
       "      <td>-1.101690</td>\n",
       "      <td>-1.233163</td>\n",
       "      <td>0.830152</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.015173</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5799</th>\n",
       "      <td>-0.284431</td>\n",
       "      <td>0.575842</td>\n",
       "      <td>-0.737696</td>\n",
       "      <td>-1.233163</td>\n",
       "      <td>-0.891560</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.471724</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5511</th>\n",
       "      <td>0.151731</td>\n",
       "      <td>-0.657902</td>\n",
       "      <td>-1.829679</td>\n",
       "      <td>0.438711</td>\n",
       "      <td>-0.891560</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.367107</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7365</th>\n",
       "      <td>-0.876366</td>\n",
       "      <td>-0.278288</td>\n",
       "      <td>1.810266</td>\n",
       "      <td>1.239884</td>\n",
       "      <td>-0.891560</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.786517</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7367</th>\n",
       "      <td>-0.481743</td>\n",
       "      <td>0.291132</td>\n",
       "      <td>1.810266</td>\n",
       "      <td>-1.233163</td>\n",
       "      <td>0.830152</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.358533</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CreditScore       Age    Tenure   Balance  NumOfProducts  HasCrCard  \\\n",
       "8532    -0.699824 -0.373192 -1.101690 -1.233163       0.830152          1   \n",
       "5799    -0.284431  0.575842 -0.737696 -1.233163      -0.891560          1   \n",
       "5511     0.151731 -0.657902 -1.829679  0.438711      -0.891560          1   \n",
       "7365    -0.876366 -0.278288  1.810266  1.239884      -0.891560          1   \n",
       "7367    -0.481743  0.291132  1.810266 -1.233163       0.830152          1   \n",
       "\n",
       "      IsActiveMember  EstimatedSalary  Geography_Germany  Geography_Spain  \\\n",
       "8532               0        -0.015173                  0                0   \n",
       "5799               1         1.471724                  0                0   \n",
       "5511               0        -1.367107                  1                0   \n",
       "7365               1        -0.786517                  0                1   \n",
       "7367               0         1.358533                  0                1   \n",
       "\n",
       "      Gender_Male  \n",
       "8532            0  \n",
       "5799            0  \n",
       "5511            1  \n",
       "7365            0  \n",
       "7367            1  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ \n",
    "features_valid[numeric] = scaler.transform(features_valid[numeric])\n",
    "features_valid.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Geography_Germany</th>\n",
       "      <th>Geography_Spain</th>\n",
       "      <th>Gender_Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7041</th>\n",
       "      <td>-2.226392</td>\n",
       "      <td>-0.088482</td>\n",
       "      <td>-1.101690</td>\n",
       "      <td>-1.233163</td>\n",
       "      <td>0.830152</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.647083</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5709</th>\n",
       "      <td>-0.087120</td>\n",
       "      <td>0.006422</td>\n",
       "      <td>1.446272</td>\n",
       "      <td>-1.233163</td>\n",
       "      <td>-0.891560</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.658410</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7117</th>\n",
       "      <td>-0.917905</td>\n",
       "      <td>-0.752805</td>\n",
       "      <td>-0.009707</td>\n",
       "      <td>0.722307</td>\n",
       "      <td>-0.891560</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.369334</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7775</th>\n",
       "      <td>-0.253277</td>\n",
       "      <td>0.101325</td>\n",
       "      <td>1.810266</td>\n",
       "      <td>-1.233163</td>\n",
       "      <td>0.830152</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.075086</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8735</th>\n",
       "      <td>0.785204</td>\n",
       "      <td>-0.847708</td>\n",
       "      <td>1.810266</td>\n",
       "      <td>0.615625</td>\n",
       "      <td>-0.891560</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.070919</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CreditScore       Age    Tenure   Balance  NumOfProducts  HasCrCard  \\\n",
       "7041    -2.226392 -0.088482 -1.101690 -1.233163       0.830152          1   \n",
       "5709    -0.087120  0.006422  1.446272 -1.233163      -0.891560          1   \n",
       "7117    -0.917905 -0.752805 -0.009707  0.722307      -0.891560          1   \n",
       "7775    -0.253277  0.101325  1.810266 -1.233163       0.830152          1   \n",
       "8735     0.785204 -0.847708  1.810266  0.615625      -0.891560          0   \n",
       "\n",
       "      IsActiveMember  EstimatedSalary  Geography_Germany  Geography_Spain  \\\n",
       "7041               0         0.647083                  0                0   \n",
       "5709               0        -1.658410                  0                0   \n",
       "7117               1        -1.369334                  0                1   \n",
       "7775               0         0.075086                  0                1   \n",
       "8735               1        -1.070919                  0                0   \n",
       "\n",
       "      Gender_Male  \n",
       "7041            1  \n",
       "5709            0  \n",
       "7117            1  \n",
       "7775            1  \n",
       "8735            1  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ \n",
    "features_test[numeric] = scaler.transform(features_test[numeric])\n",
    "features_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\"  style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class=\"tocSkip\"> </h2>    \n",
    "\n",
    "üëç –ü–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—á—Ç–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ. –ù—É–∂–Ω–æ –ª–∏—à—å –ø–æ–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤.\n",
    "    \n",
    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ç–æ–º, —á—Ç–æ —Å–¥–µ–ª–∞–ª–∏, –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö —É–≤–∏–¥–µ–ª–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—è–º–∏ ‚àí –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é.\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n",
    "\n",
    "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Ç—Ä–µ—Ö –≤—ã–±–æ—Ä–æ–∫. –ü–µ—Ä–µ–π–¥–µ–º –∫ –æ–±—É—á–µ–Ω–∏—é –º–æ–¥–µ–ª–µ–π."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def all_models_accuracy(features_train, target_train, features_valid, target_valid):\n",
    "    model_DTC = DecisionTreeClassifier(random_state=1515)\n",
    "    DTC_score = model_DTC.fit(features_train, target_train).score(features_valid, target_valid)\n",
    "    \n",
    "    model_RFC = RandomForestClassifier(max_depth=7, n_estimators=43, min_samples_leaf=3, random_state=1515)\n",
    "    RFC_score = model_RFC.fit(features_train, target_train).score(features_valid, target_valid)\n",
    "    \n",
    "    model_LgR = LogisticRegression(solver = 'liblinear')\n",
    "    LgR_score = model_LgR.fit(features_train, target_train).score(features_valid, target_valid)\n",
    "    print(\"–¢–æ—á–Ω–æ—Å—Ç—å:\" \"–¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π\", DTC_score, \"—Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å \", RFC_score, \"–ª–æ–≥–∏—Å—Ç—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è\", LgR_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–¢–æ—á–Ω–æ—Å—Ç—å:–¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π 0.79 —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å  0.8585 –ª–æ–≥–∏—Å—Ç—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è 0.802\n"
     ]
    }
   ],
   "source": [
    "all_models_accuracy(features_train, target_train, features_valid, target_valid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤ –≤—ã–±–æ—Ä–∫–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.800667\n",
       "1    0.199333\n",
       "Name: Exited, dtype: float64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target_train.value_counts(normalize = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHQAAABZCAYAAADvqADPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAGmElEQVR4nO2dX4wVVx3HP19KK2BsCllAQ6VbTQOS0CbIH5PaGDXWVtJaTawam5CmafsAD8YXV0KUYDTFxFZrNAEb2lKllJpQMVBxeaEvVVhsU2iBQBAUqGLBlBYISP32Yc6yN+vu3nPv3rM7d/Z8ksmc+c2Zme/Nd8/M2TNnzpFtMtVh3GgLyLSWbGjFyIZWjGxoxciGVoxsaMVIaqiko5L2SnpVUk+ITZHULelQWE8OcUl6XNJhSa9JmldzniUh/yFJS1JqbntsJ1uAo0BHv9hPgK6Q7gJWh/SXgBcBAZ8C/hLiU4AjYT05pCen1N3Oy2jccr8MPB3STwP31MTXu+DPwHWSPgJ8Eei2fcb2f4Bu4I4R1tw2jE98fgN/kmRgje21wHTbb4b9/wSmh/QM4B81xx4PscHig9LR0eHOzs7hqy8pe/bsecv21IH2pTb007ZPSJoGdEs6ULvTtoPZw0bSQ8BDADNnzqSnp6cVpy0lko4Nti/pLdf2ibA+BWwGFgL/CrdSwvpUyH4C+GjN4deH2GDx/tdaa3u+7flTpw74xzsmSFZCJX0QGGf7nZC+HVgFbAGWAI+E9e/DIVuAZZI2AouAt22/KWk78OPe2nA4z/didXR2bW3J7xmKo48sTn6NWKIMlTTX9t4Gzz0d2Cyp9zobbP9R0m5gk6QHgGPAvSH/Noqa7mHgPHA/gO0zkn4I7A75Vtk+06CWMUNsCf2VpA8ATwG/tf12vQNsHwFuGSB+Gvj8AHEDSwc51zpgXaTWMU3UM9T2bcC3KJ5leyRtkPSFpMoyTRFdKbJ9CFgBfBf4DPC4pAOSvppKXKZxogyVdLOkx4D9wOeAu2x/IqQfS6gv0yCxz9BfAE8Ay21f6A3aPilpRRJlmaaINXQxcMH2ewCSxgETbJ+3/UwydZmGiX2G7gAm1mxPCrFMyYg1dILtd3s3QnpSGkmZ4RBr6Ll+7yc/CVwYIn9mlIh9hn4beF7SSYr3lR8Gvp5KVKZ5ogy1vVvSbGBWCB20/d90sjLN0kjj/AKgMxwzTxK21ydRlWma2Mb5Z4CPA68C74WwgWxoyYgtofOBOaEBPVNiYmu5+ygqQpmSE1tCO4A3JO0CLvYGbd+dRFWmaWINXZlSRKZ1xP7bslPSDcBNtndImgRclVZaphliX589CPwOWBNCM4AXEmnKDIPYStFS4FbgLFx52T0tlahM88QaetH2pd4NSeMp/g/NlIxYQ3dKWg5MDH2Jngf+kE5WplliDe0C/g3sBR6m6HKZeyqUkNha7v+AX4clU2Ji23L/xgDPTNsfa7mizLBopC23lwnA1yi+18yUjNiO1qdrlhO2f0bRcSxTMmJvufNqNsdRlNjUnyJmmiDWlJ/WpC9TfGp/78BZM6NJbC33s6mFZFpD7C33O0Ptt/1oa+RkhksjtdwFFB/lAtwF7AIOpRCVaZ5YQ68H5tl+B0DSSmCr7ftSCcs0R2zT33TgUs32JfpGL8mUiNgSuh7YJWlz2L6HvrGGMiUitpb7I0kvAreF0P22X0knK9MsjQxrMwk4a/vnwHFJNybSlBkGsf+2/ICipjsLeBK4GvgNRS+GMc9IDJ0DccPnxJbQrwB3A+eg+HIb+FDTyjLJiDX0Uug1b7gyqFSmhMQauknSGooRMh+k+Ho7v+wuIXWfoSqGAnsOmE3R628W8H3b3Ym1ZZqgrqFhxMxttudSjFWbKTGxt9y/SlqQVEmmJcS2FC0C7pN0lKKmK4rCe3MqYZnmGNJQSTNt/51imPBMG1DvlvsCgO1jwKO2j9UuydXVIOkOSQfDrBFdI3ntdqKeoapJj1qXTUlXAb8E7gTmAN+UNGe09JSZeoZ6kPRIsxA4bPtI+MZmI8UsEpl+1KsU3SLpLEVJnRjS0Fcpujapuj4Gmhli0Qhdu60Y0lDbbfNRb+2sEMC7kg6GdAfw1uioai1afeW33DBYnnbpW1t3ZogwJ8za/gdK6rE9v3+8HYn5Le0ymd1u4CZJN0q6BvgGfR3WMjW0RQm1fVnSMmA7xdgO62y/PsqySklbGApgexvFd6mN8n+34Tam7m9RHhysWrTLMzQTSWUNrVJToaR1kk5J2lcvbyUNrWBT4VNEzplaSUOpWFOh7ZeAqPneqmpow5PIVoWqGjpmqaqhUZPIVpGqGjpmmworaajty0BvU+F+YFM7NxVKehZ4GZgl6XiYTHfgvLmlqFpUsoSOZbKhFSMbWjGyoRUjG1oxsqEVIxtaMbKhFeN9WQ1BdmKyZkwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 72x72 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# –ü–æ—Å—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤\n",
    "target_train.plot(kind ='hist', bins=2, figsize=(1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ö–∞–∫ –º—ã –≤—ã—è—Å–Ω–∏–ª–∏ –≤ –Ω–∞—à–µ–π –≤—ã–±–æ—Ä–∫–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ ‚âà80% , –ø–æ–ª–æ–∂–∏—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö ‚âà 20%. –° —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –º–æ–∂–µ–º —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ –∏–º–µ–µ—Ç—Å—è –¥–∏—Å–±–∞–ª–∞–Ω—Å."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏\n",
    "–ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–æ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "#–ó–∞—Ä–∞–Ω–µ–µ –Ω–∞–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑—É—á–∏—è –ø–æ–ª–Ω–æ—Ç—ã, —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ F1-–º–µ—Ä—ã\n",
    "def rec_prec_f1(target_valid, prediction):\n",
    "    print(\"–ü–æ–ª–Ω–æ—Ç–∞\" , recall_score(target_valid, prediction))\n",
    "    print(\"–¢–æ—á–Ω–æ—Å—Ç—å\", precision_score(target_valid, prediction))\n",
    "    print(\"F1-–º–µ—Ä–∞\", f1_score(target_valid, prediction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π (—Å–∫–æ–ª—å–∫–æ 0, —Å–∫–æ–ª—å–∫–æ 1)\n",
    "def all_models_share(features_train, target_train, features_valid, target_valid):\n",
    "    model_DTC = DecisionTreeClassifier(random_state=1515)\n",
    "    model_DTC.fit(features_train, target_train)\n",
    "    DTC_share = pd.Series(model_DTC.predict(features_valid)).value_counts(normalize = 1)\n",
    "    \n",
    "    \n",
    "    \n",
    "    model_RFC = RandomForestClassifier(random_state=1515, n_estimators = 100)\n",
    "    model_RFC.fit(features_train, target_train)\n",
    "    RFC_share = pd.Series(model_RFC.predict(features_valid)).value_counts(normalize = 1)\n",
    "    \n",
    "    model_LgR = LogisticRegression(solver = 'liblinear')\n",
    "    model_LgR.fit(features_train, target_train)\n",
    "    LgR_share = pd.Series(model_LgR.predict(features_valid)).value_counts(normalize = 1)\n",
    "    \n",
    "\n",
    "    \n",
    "    print(\"–î–æ–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤:\" \"–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π\", DTC_share, \"–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å \", RFC_share, \"–õ–æ–≥–∏—Å—Ç—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è\", LgR_share , end='')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–î–æ–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤:–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π 0    0.795\n",
      "1    0.205\n",
      "dtype: float64 –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å  0    0.874\n",
      "1    0.126\n",
      "dtype: float64 –õ–æ–≥–∏—Å—Ç—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è 0    0.913\n",
      "1    0.087\n",
      "dtype: float64"
     ]
    }
   ],
   "source": [
    "#–ü—Ä–∏–º–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π\n",
    "all_models_share(features_train, target_train, features_valid, target_valid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞ —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å, –¥–∞–ª–µ–µ —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å –∏ –≤ –∫–æ–Ω—Ü–µ –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π\n",
    "\n",
    "–° —É—á–µ—Ç–æ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ —á—Ç–æ –º–æ–¥–µ–ª–∏ —Å –±–æ–ª—å—à–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç 0, –ø–æ—Å—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–¥–µ–ª–µ–π"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1526,   56],\n",
       "       [ 222,  196]])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å\n",
    "model_RFC = RandomForestClassifier(random_state=1515, n_estimators = 100)\n",
    "model_RFC.fit(features_train, target_train)\n",
    "RFC_prediction = model_RFC.predict(features_valid)\n",
    "confusion_matrix(target_valid, RFC_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–ü–æ–ª–Ω–æ—Ç–∞ 0.4688995215311005\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å 0.7777777777777778\n",
      "F1-–º–µ—Ä–∞ 0.5850746268656717\n"
     ]
    }
   ],
   "source": [
    "rec_prec_f1(target_valid, RFC_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8383821581306443"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–†–∞—Å—á–µ—Ç roc_auc_RFC\n",
    "RFC_probabilities_one_valid = model_RFC.predict_proba(features_valid)[:, 1]\n",
    "\n",
    "auc_roc_RFC = roc_auc_score(target_valid, RFC_probabilities_one_valid)\n",
    "\n",
    "auc_roc_RFC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í—ã–≤–æ–¥ –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—É—é –ø—Ä–æ–ø–æ—Ä—Ü–∏—é –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, –≤—ã–¥–∞–µ—Ç –∑–∞–º–µ—Ç–Ω–æ –±–æ–ª—å—à–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, –Ω–æ —Ç–∞–∫–∂–µ —Å–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–µ—Ç—Å—è –∫ –ª–æ–∂–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º (FP). –¢–æ—á–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–∞–∫–∂–µ –Ω–∏–∑–∫–æ–µ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1376,  206],\n",
       "       [ 214,  204]])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–î—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π\n",
    "#–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π\n",
    "model_DTC = DecisionTreeClassifier(random_state=1515)\n",
    "model_DTC.fit(features_train, target_train)\n",
    "DTC_prediction = model_DTC.predict(features_valid)\n",
    "confusion_matrix(target_valid, DTC_prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í—ã–≤–æ–¥ –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π —Å–∫–ª–æ–Ω–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (FP)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–ü–æ–ª–Ω–æ—Ç–∞ 0.4880382775119617\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å 0.4975609756097561\n",
      "F1-–º–µ—Ä–∞ 0.49275362318840576\n"
     ]
    }
   ],
   "source": [
    "rec_prec_f1(target_valid, DTC_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6789116798432122"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–†–∞—Å—á–µ—Ç roc_auc_DTC\n",
    "DTC_probabilities_one_valid = model_DTC.predict_proba(features_valid)[:, 1]\n",
    "\n",
    "auc_roc_DTC = roc_auc_score(target_valid, DTC_probabilities_one_valid)\n",
    "\n",
    "auc_roc_DTC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í—ã–≤–æ–¥ –í–∏–¥–∏–º –Ω–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ F1, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1506,   76],\n",
       "       [ 320,   98]])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è\n",
    "#–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏\n",
    "model_LgR = LogisticRegression(solver = 'liblinear')\n",
    "model_LgR.fit(features_train, target_train)\n",
    "LgR_prediction = model_LgR.predict(features_valid)\n",
    "confusion_matrix(target_valid, LgR_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–ü–æ–ª–Ω–æ—Ç–∞ 0.23444976076555024\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å 0.5632183908045977\n",
      "F1-–º–µ—Ä–∞ 0.33108108108108103\n"
     ]
    }
   ],
   "source": [
    "rec_prec_f1(target_valid, LgR_prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7587512627102753"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–î–ª—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ —Ä–∞—Å—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫—É AUC-ROC\n",
    "LgR_probabilities_one_valid = model_LgR.predict_proba(features_valid)[:, 1]\n",
    "\n",
    "auc_roc_LgR = roc_auc_score(target_valid, LgR_probabilities_one_valid)\n",
    "\n",
    "auc_roc_LgR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC-ROC DecisionTreeClassifier 0.8173962158009667\n",
      "AUC-ROC RandomForestClassifier 0.8294509403032924\n",
      "AUC-ROC LogisticRegression 0.7587512627102753\n",
      "AUC-ROC GaussianNB 0.7849430494982429\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[12,9])\n",
    "\n",
    "plt.plot([0, 1], [0, 1], linestyle='--', label='RandomModel')\n",
    "\n",
    "\n",
    "model = DecisionTreeClassifier(random_state=20052020, max_depth=7)\n",
    "model.fit(features_train, target_train)\n",
    "probabilities_valid = model.predict_proba(features_valid)\n",
    "probabilities_one_valid = probabilities_valid[:, 1]\n",
    "fpr, tpr, thresholds = roc_curve(target_valid, probabilities_one_valid)\n",
    "auc_roc = roc_auc_score(target_valid, probabilities_one_valid)\n",
    "print('AUC-ROC DecisionTreeClassifier',auc_roc)\n",
    "plt.plot(fpr, tpr, label='DecisionTreeClassifier')\n",
    "\n",
    "model = RandomForestClassifier(random_state=20052020, n_estimators=53)\n",
    "model.fit(features_train, target_train)\n",
    "probabilities_valid = model.predict_proba(features_valid)\n",
    "probabilities_one_valid = probabilities_valid[:, 1]\n",
    "fpr, tpr, thresholds = roc_curve(target_valid, probabilities_one_valid)\n",
    "auc_roc = roc_auc_score(target_valid, probabilities_one_valid)\n",
    "print('AUC-ROC RandomForestClassifier',auc_roc)\n",
    "plt.plot(fpr, tpr, label='RandomForestClassifier')\n",
    "\n",
    "model = LogisticRegression(random_state=20052020, solver='liblinear')\n",
    "model.fit(features_train, target_train)\n",
    "probabilities_valid = model.predict_proba(features_valid)\n",
    "probabilities_one_valid = probabilities_valid[:, 1]\n",
    "fpr, tpr, thresholds = roc_curve(target_valid, probabilities_one_valid)\n",
    "auc_roc = roc_auc_score(target_valid, probabilities_one_valid)\n",
    "print('AUC-ROC LogisticRegression',auc_roc)\n",
    "plt.plot(fpr, tpr, label='LogisticRegression')\n",
    "model = GaussianNB()\n",
    "model.fit(features_train, target_train)\n",
    "probabilities_valid = model.predict_proba(features_valid)\n",
    "probabilities_one_valid = probabilities_valid[:, 1]\n",
    "fpr, tpr, thresholds = roc_curve(target_valid, probabilities_one_valid)\n",
    "auc_roc = roc_auc_score(target_valid, probabilities_one_valid)\n",
    "print('AUC-ROC GaussianNB',auc_roc)\n",
    "plt.plot(fpr, tpr, label='GaussianNB')\n",
    "\n",
    "plt.xlim([0,1])\n",
    "plt.ylim([0,1])\n",
    "\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "\n",
    "plt.legend(loc='lower right', fontsize='x-large')\n",
    "\n",
    "plt.title(\"ROC-–∫—Ä–∏–≤–∞—è\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class=\"tocSkip\"></h2>\n",
    "  \n",
    "<b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>\n",
    " \n",
    "–í—ã—à–µ –º—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–∞ –≤—Å–µ —Ç—Ä–∏ –º–æ–¥–µ–ª–∏ –±–µ–∑ —É—á–µ—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤. –í–∞–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤ –î–µ—Ä–µ–≤–µ —Ä–µ—à–µ–Ω–∏–π –∏ –°–ª—É—á–∞–π–Ω–æ–º –ª–µ—Å–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã. \n",
    "    \n",
    "–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ –≤ —Ü–∏–∫–ª–µ –∏–ª–∏ –¥–≤–æ–π–Ω–æ–º —Ü–∏–∫–ª–µ. –î–ª—è –î–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥–ª—É–±–∏–Ω—É, –¥–ª—è –°–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏ –≥–ª—É–±–∏–Ω—É, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤. –¢–∞–∫ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞—Å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –õ–µ—Å–µ:\n",
    "    \n",
    "`for est in range(10, 151, 10):\n",
    "    for depth in range(1, 16):\n",
    "        model = RandomForestClassifier(random_state=12345, n_estimators=est, max_depth=depth)\n",
    "        model.fit(features_train, target_train)\n",
    "        predicted_valid = model.predict(features_valid)\n",
    "        f1 = f1_score(target_valid, predicted_valid)\n",
    "        print('est-', est, '  depth-', depth, '  f1', f1`\n",
    "   \n",
    "–≠—Ç–æ –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–æ–∫ —è –≤–∑—è–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ, —É —Ç–µ–±—è –æ–Ω–∏ –º–æ–≥—É—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è, –Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–µ–Ω.\n",
    "    \n",
    "***\n",
    "    \n",
    "–ü–æ—á–µ–º—É –Ω–∞–º –≤–∞–∂–Ω–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã?\n",
    "    \n",
    "–ö–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏–º –º–æ–¥–µ–ª–∏ –±–µ–∑ –ø–æ–¥–±–æ—Ä–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ù–∞–º –∂–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É –≤–∞–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º. –õ–æ–≥–∏—á–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –ø–æ–¥–±–æ—Ä–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∞ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –ó–∞–¥–∞—á–∞ –¥–∞—Ç–∞-—Å–∞–π–µ–Ω—Ç–∏—Å—Ç–∞ ‚àí –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å.\n",
    "\n",
    "\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "–ò—Å–ø—Ä–∞–≤–∏–ª–∞. –ù–∞ –ø–æ–¥–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —á—Ç–æ —É –º–µ–Ω—è –±—ã–ª–æ –≤ –ø—Ä–æ—à–ª–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ, –¥—É–º–∞—é, —á—Ç–æ –∑–¥–µ—Å—å –≤—Å–µ —Ö–æ—Ä–æ—à–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ü–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ä–µ–∑–∑—É–ª—å—Ç–∞—Ç–∞–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∞ f1 –∏ AUC-ROC –ª—É—á—à–∞—è –Ω–∞ —Å–ª—É—á–∞–Ω–æ–º –ª–µ—Å–µ."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "üëç –û—Ç–ª–∏—á–Ω–æ\n",
    "</div>\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ö–∞–∫ –º—ã –≤—ã—è—Å–Ω–∏–ª–∏ —Ä–∞–Ω–µ–µ –≤ –Ω–∞—à–µ–π –≤—ã–±–æ—Ä–∫–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ ‚âà80% , –ø–æ–ª–æ–∂–∏—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö ‚âà 20%. –ù–∞–º –Ω–µ–æ–±—Ö–æ–¥–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ 4 —Ä–∞–∑–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –õ–∏–±–æ –∂–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª-–≤–æ –æ—Ç—Ä–∏—Ü—Ç–∞–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n",
    "\n",
    "- –†–∞–∑–¥–µ–ª–∏–º –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã;\n",
    "- –°–∫–æ–ø–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã;\n",
    "- –° —É—á—ë—Ç–æ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É;\n",
    "- –ü–µ—Ä–µ–º–µ—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ: –∏–¥—É—â–∏–µ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø–æ–º–æ–≥—É—Ç –æ–±—É—á–µ–Ω–∏—é.\n",
    "- –û–±—É—á–∏–º –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.7725\n",
      "Precision 0.4689075630252101\n",
      "Recall 0.6674641148325359\n",
      "F1 0.5508390918065154\n",
      "\n",
      "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.86\n",
      "Precision 0.7782258064516129\n",
      "Recall 0.46172248803827753\n",
      "F1 0.5795795795795796\n",
      "\n",
      "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.702\n",
      "Precision 0.3810160427807487\n",
      "Recall 0.6818181818181818\n",
      "F1 0.4888507718696398\n",
      "\n",
      "CPU times: user 459 ms, sys: 49.1 ms, total: 508 ms\n",
      "Wall time: 449 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "model = DecisionTreeClassifier(random_state=20052020, max_depth=7, class_weight='balanced')\n",
    "model.fit(features_train, target_train)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()\n",
    "\n",
    "model = RandomForestClassifier(random_state=20052020, n_estimators=53, class_weight='balanced')\n",
    "model.fit(features_train, target_train)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()\n",
    "\n",
    "model = LogisticRegression(random_state=20052020, solver='liblinear', class_weight='balanced')\n",
    "model.fit(features_train, target_train)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "F-–º–µ—Ä–∞ —É–ø–∞–ª–∞ —É —Ä–µ—à–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞, –Ω–æ –≤—ã—Ä–æ—Å–ª–∞ –≤ —Ä–∞–∑—ã —É –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏.\n",
    "\n",
    "–ò—Å—Å–ª–µ–¥—É–µ–º —Å–ø–æ—Å–æ–± —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–ª–∞—Å—Å–∞ 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    1201\n",
      "1    1196\n",
      "Name: Exited, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "def downsample(features, target, fraction):\n",
    "    features_zeros = features[target == 0]\n",
    "    features_ones = features[target == 1]\n",
    "    target_zeros = target[target == 0]\n",
    "    target_ones = target[target == 1]\n",
    "\n",
    "    features_downsampled = pd.concat(\n",
    "        [features_zeros.sample(frac=fraction, random_state=20052020)] + [features_ones])\n",
    "    target_downsampled = pd.concat(\n",
    "        [target_zeros.sample(frac=fraction, random_state=20052020)] + [target_ones])\n",
    "    \n",
    "    features_downsampled, target_downsampled = shuffle(\n",
    "        features_downsampled, target_downsampled, random_state=20052020)\n",
    "    \n",
    "    return features_downsampled, target_downsampled\n",
    "\n",
    "features_downsampled, target_downsampled = downsample(features_train, target_train, 0.25)\n",
    "\n",
    "print(target_downsampled.value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞  #2 <a class=\"tocSkip\"> </h2>\n",
    "    \n",
    "<b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> \n",
    "\n",
    "–ö–∞–∫ –≤–∏–¥–∏–º, –≤—ã—à–µ –º—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥–∞, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ–≥–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –µ—â–µ –≤ —á–µ—Ç—ã—Ä–µ —Ä–∞–∑–∞. –ü—Ä–µ–¥–∞–ª–≥–∞—é —É–¥–∞–ª–∏—Ç—å —è—á–µ–π–∫—É –≤—ã—à–µ. –ú—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ —Ä–µ–¥–∫–∏–π –∫–ª–∞—Å—Å —É –Ω–∞—Å ¬´1¬ª –∏ —á—Ç–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1:4, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –º–æ–∂–µ–º —Å—Ä–∞–∑—É –ø–æ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–±–∏—Ä–∞—è.\n",
    "       \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "–ò—Å–ø—Ä–∞–≤–∏–ª–∞. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.7595\n",
      "Precision 0.45319465081723626\n",
      "Recall 0.7296650717703349\n",
      "F1 0.5591200733272227\n",
      "\n",
      "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.7845\n",
      "Precision 0.4899536321483771\n",
      "Recall 0.7583732057416268\n",
      "F1 0.5953051643192488\n",
      "\n",
      "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.7145\n",
      "Precision 0.3950617283950617\n",
      "Recall 0.6889952153110048\n",
      "F1 0.5021795989537925\n",
      "\n",
      "–ì–∞—É—Å–æ–≤—Å–∫–∞—è –±–∞–π—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.7325\n",
      "Precision 0.4165477888730385\n",
      "Recall 0.6985645933014354\n",
      "F1 0.5218945487042002\n",
      "\n",
      "CPU times: user 308 ms, sys: 116 ms, total: 424 ms\n",
      "Wall time: 420 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "model = DecisionTreeClassifier(random_state=20052020, max_depth=7)\n",
    "model.fit(features_downsampled, target_downsampled)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()\n",
    "\n",
    "model = RandomForestClassifier(random_state=20052020, n_estimators=53)\n",
    "model.fit(features_downsampled, target_downsampled)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()\n",
    "\n",
    "model = LogisticRegression(random_state=20052020, solver='liblinear')\n",
    "model.fit(features_downsampled, target_downsampled)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()\n",
    "\n",
    "model = GaussianNB()\n",
    "model.fit(features_downsampled, target_downsampled)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–ì–∞—É—Å–æ–≤—Å–∫–∞—è –±–∞–π—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –≥–∞—É—Å–æ–≤—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –≤—ã—Ä–æ—Å–ª–∏. –†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ –∏ —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å –ø–æ–∫–∞–∑–∞–ª–∏ —Å–µ–±—è —Ö—É–∂–µ.\n",
    "\n",
    "–ò—Å—Å–ª–µ–¥—É–µ–º –º–µ—Ç–æ–¥—ã —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-success\"  style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class=\"tocSkip\"> </h2>    \n",
    "\n",
    "üëç –í–∞—Ä–∏–∞–Ω—Ç –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥–∞ –≤—ã—à–µ —Å `upsample(features_train, target_train, 4, 1)` –Ω–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç.\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "–ò—Å–ø—Ä–∞–≤–∏–ª–∞. –°—Ç–∞—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ –≤—Å–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–æ—ç—Ç–æ–º—É –Ω–∏–∂–µ —É–∂–µ —á—É—Ç—å –¥—Ä—É–≥–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    4804\n",
      "1    4784\n",
      "Name: Exited, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "def upsample(features, target, repeat):\n",
    "    features_zeros = features[target == 0]\n",
    "    features_ones = features[target == 1]\n",
    "    target_zeros = target[target == 0]\n",
    "    target_ones = target[target == 1]\n",
    "\n",
    "    features_upsampled = pd.concat([features_zeros] + [features_ones] * repeat)\n",
    "    target_upsampled = pd.concat([target_zeros] + [target_ones] * repeat)\n",
    "    \n",
    "    features_upsampled, target_upsampled = shuffle(\n",
    "        features_upsampled, target_upsampled, random_state=12345)\n",
    "    \n",
    "    return features_upsampled, target_upsampled\n",
    "\n",
    "features_upsampled, target_upsampled = upsample(features_train, target_train, 4)\n",
    "\n",
    "print(target_upsampled.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.774\n",
      "Precision 0.47128378378378377\n",
      "Recall 0.6674641148325359\n",
      "F1 0.5524752475247525\n",
      "\n",
      "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.847\n",
      "Precision 0.6590909090909091\n",
      "Recall 0.5550239234449761\n",
      "F1 0.6025974025974027\n",
      "\n",
      "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.702\n",
      "Precision 0.3810160427807487\n",
      "Recall 0.6818181818181818\n",
      "F1 0.4888507718696398\n",
      "\n",
      "–ì–∞—É—Å–æ–≤—Å–∫–∞—è –±–∞–π—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.714\n",
      "Precision 0.3956639566395664\n",
      "Recall 0.6985645933014354\n",
      "F1 0.5051903114186851\n",
      "\n",
      "CPU times: user 686 ms, sys: 108 ms, total: 794 ms\n",
      "Wall time: 788 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "model = DecisionTreeClassifier(random_state=20052020, max_depth=7)\n",
    "model.fit(features_upsampled, target_upsampled)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()\n",
    "\n",
    "model = RandomForestClassifier(random_state=20052020, n_estimators=53)\n",
    "model.fit(features_upsampled, target_upsampled)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()\n",
    "\n",
    "model = LogisticRegression(random_state=20052020, solver='liblinear')\n",
    "model.fit(features_upsampled, target_upsampled)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()\n",
    "\n",
    "model = GaussianNB()\n",
    "model.fit(features_upsampled, target_upsampled)\n",
    "predicted_valid = model.predict(features_valid)\n",
    "print('–ì–∞—É—Å–æ–≤—Å–∫–∞—è –±–∞–π—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å')\n",
    "print('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º', accuracy_score(target_valid, predicted_valid))\n",
    "print('Precision', precision_score(target_valid, predicted_valid))\n",
    "print('Recall', recall_score(target_valid, predicted_valid))\n",
    "print('F1', f1_score(target_valid, predicted_valid))\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "F-–º–µ—Ä–∞ —Å—Ç–∞–ª–∞ –ª—É—á—à–µ —É —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞, –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏ –∏ –≥–∞—É—Å–æ–≤—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –õ—É—á—à–µ–π –º–æ–¥–µ–ª—å—é –ø–æ F-–º–µ—Ä–∞ —Å—Ç–∞–ª —Å–ª—É—á–∞–π–Ω—ã –ª–µ—Å —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –≥–¥–µ —É–≤–µ–ª–∏—á–µ–Ω –∫–ª–∞—Å—Å 1.\n",
    "\n",
    "–í—ã–≤–µ–¥–µ–º ROC-–∫—Ä–∏–≤—É—é –∏ AUC-ROC –¥–ª—è –ø–æ—Å–ª–µ–Ω–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC-ROC DecisionTreeClassifier 0.7949464368886818\n",
      "AUC-ROC RandomForestClassifier 0.8353055305197831\n",
      "AUC-ROC LogisticRegression 0.7636478565682107\n",
      "AUC-ROC GaussianNB 0.7849430494982429\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[12,9])\n",
    "\n",
    "plt.plot([0, 1], [0, 1], linestyle='--', label='RandomModel')\n",
    "\n",
    "\n",
    "model = DecisionTreeClassifier(random_state=20052020, max_depth=7)\n",
    "model.fit(features_upsampled, target_upsampled)\n",
    "probabilities_valid = model.predict_proba(features_valid)\n",
    "probabilities_one_valid = probabilities_valid[:, 1]\n",
    "fpr, tpr, thresholds = roc_curve(target_valid, probabilities_one_valid)\n",
    "auc_roc = roc_auc_score(target_valid, probabilities_one_valid)\n",
    "print('AUC-ROC DecisionTreeClassifier',auc_roc)\n",
    "plt.plot(fpr, tpr, label='DecisionTreeClassifier')\n",
    "\n",
    "model = RandomForestClassifier(random_state=20052020, n_estimators=53)\n",
    "model.fit(features_upsampled, target_upsampled)\n",
    "probabilities_valid = model.predict_proba(features_valid)\n",
    "probabilities_one_valid = probabilities_valid[:, 1]\n",
    "fpr, tpr, thresholds = roc_curve(target_valid, probabilities_one_valid)\n",
    "auc_roc = roc_auc_score(target_valid, probabilities_one_valid)\n",
    "print('AUC-ROC RandomForestClassifier',auc_roc)\n",
    "plt.plot(fpr, tpr, label='RandomForestClassifier')\n",
    "\n",
    "model = LogisticRegression(random_state=20052020, solver='liblinear')\n",
    "model.fit(features_upsampled, target_upsampled)\n",
    "probabilities_valid = model.predict_proba(features_valid)\n",
    "probabilities_one_valid = probabilities_valid[:, 1]\n",
    "fpr, tpr, thresholds = roc_curve(target_valid, probabilities_one_valid)\n",
    "auc_roc = roc_auc_score(target_valid, probabilities_one_valid)\n",
    "print('AUC-ROC LogisticRegression',auc_roc)\n",
    "plt.plot(fpr, tpr, label='LogisticRegression')\n",
    "model = GaussianNB()\n",
    "model.fit(features_upsampled, target_upsampled)\n",
    "probabilities_valid = model.predict_proba(features_valid)\n",
    "probabilities_one_valid = probabilities_valid[:, 1]\n",
    "fpr, tpr, thresholds = roc_curve(target_valid, probabilities_one_valid)\n",
    "auc_roc = roc_auc_score(target_valid, probabilities_one_valid)\n",
    "print('AUC-ROC GaussianNB',auc_roc)\n",
    "plt.plot(fpr, tpr, label='GaussianNB')\n",
    "\n",
    "plt.xlim([0,1])\n",
    "plt.ylim([0,1])\n",
    "\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "\n",
    "plt.legend(loc='lower right', fontsize='x-large')\n",
    "\n",
    "plt.title(\"ROC-–∫—Ä–∏–≤–∞—è\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "–ò—Å–ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –¥—Ä—É–≥–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ. –ù–∏–∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏–ª–∏—Å—å –∫ —Å—Ç–∞—Ä–æ–º—É —Ä–µ—à–µ–Ω–∏—é\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class=\"tocSkip\"></h2>\n",
    "  \n",
    "<b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>\n",
    " \n",
    "–ó–¥–µ—Å—å –¥–ª—è –Ω–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤–≤–æ–¥–Ω—ã–µ, —Ç–µ–ø–µ—Ä—å –ø–æ–¥–∞–µ–º –∞–ø—Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É. –ü–æ—ç—Ç–æ–º—É –≤–∞–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n",
    "    \n",
    "–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ, –æ–¥–Ω–∞–∫–æ –Ω–∏–≥–¥–µ –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ—à—å –∫–æ–¥–∞ –∏—Ö –ø–æ–¥–±–æ—Ä–∞. –í —ç—Ç–æ–º –ø—Ä–æ–∫—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ —Å –ø–æ–¥–±–æ—Ä–æ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–±–∏—Ä–∞—Ç—å –≤ —Ü–∏–∫–ª–µ –∏ –¥–≤–æ–π–Ω–æ–º —Ü–∏–∫–ª–µ. –ü—Ä–∏–º–µ—Ä –æ—Å—Ç–∞–≤–∏–ª –≤—ã—à–µ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å —Ç–µ–º, –∫–∞–∫ –±—É–¥–µ–º –ø–æ–¥–±–∏—Ä–∞—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–ª—É—á–∞–µ –±–µ–∑ —É—á–µ—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤.\n",
    "\n",
    "</div>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-danger\">\n",
    "<h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2<a class=\"tocSkip\"></h2>\n",
    "  \n",
    "<b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>\n",
    " \n",
    "–ë—É–¥–µ—Ç –æ—à–∏–±–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∞–ø—Å–µ–ø–ª–∏–Ω–≥ –∏–ª–∏ –¥–∞—É–Ω—Å–µ–º–ø–ª–∏–Ω–≥ –∏ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã class_weight='balanced'. –ú—ã –∏ —Ç–∞–∫ –¥–æ–≤–æ–¥–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∫ 1:1, —Ç–∞–∫ —á—Ç–æ, class_weight —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —ç—Ç–æ –Ω–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–∞–¥–µ–Ω–∏—é –∫–æ–¥–∞ –∏–ª–∏ —É—Ö—É–¥—à–µ–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–æ –∏ –∫ —É–ª—É—á—à–µ–Ω–∏—é –Ω–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏), —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∂–µ —Ç–∞–∫–æ–π –∫–æ–¥ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –º—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ–º –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —Ç–µ—Ö–Ω–∏–∫–∏ –±–æ—Ä—å–±—ã —Å –¥–∏–±—Å–∞–ª–∞–Ω—Å–æ–º.\n",
    "\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í—ã–≤–æ–¥\n",
    "\n",
    "–î–∏—Å–±–∞–ª–∞–Ω—Å –ø–æ–≤–ª–∏—è–ª –Ω–∞ –º–æ–¥–µ–ª–∏ –≤ —Ö—É–¥—à—É—é —Å—Ç–æ—Ä–æ–Ω—É. –õ—É—á—à–∏–º —Ä–µ—à–µ–Ω–∏–µ–º —Å—Ç–∞–ª–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ 1 –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ.\n",
    "\n",
    "–í—ã—Ä–∞–≤–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ –ø—Ä–∏–≤–µ–ª–æ –∫ —Ä–µ–∑–∫–æ–º—É —Ä–æ—Å—Ç—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ recall –∏ –Ω–µ–±–æ–ª—å—à–æ–º—É –ø–æ–Ω–∏–∂–µ–Ω–∏—é percison. –ù–æ –≤ —Ü–µ–ª–æ–º F-–º–µ—Ä–∞ –≤—ã—Ä–æ—Å–ª–∞."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "üëç –ó–¥–µ—Å—å –≤—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n",
    "</div> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(class_weight='balanced', max_depth=7, n_estimators=43,\n",
       "                       random_state=12345)"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–û–±—É—á–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å\n",
    "model_RFC_final = RandomForestClassifier(\n",
    "    bootstrap = True, class_weight = 'balanced', max_depth= 7,  n_estimators = 43, random_state=12345)\n",
    "model_RFC_final.fit(features_train_upsampled, target_train_upsampled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–ü–æ–ª–Ω–æ—Ç–∞ 0.7044917257683215\n",
      "–¢–æ—á–Ω–æ—Å—Ç—å 0.5146804835924007\n",
      "F1-–º–µ—Ä–∞ 0.594810379241517\n"
     ]
    }
   ],
   "source": [
    "model_RFC_final_prediction = model_RFC_final.predict(features_test)\n",
    "rec_prec_f1(target_test, model_RFC_final_prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #3 <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "üëç –û–∫, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–∞–µ–º.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8506006107295926"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–†–∞—Å—á–∏—Ç–∞–µ–º auc_roc –¥–ª—è RFC –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ\n",
    "model_RFC_final_valid = model_RFC_final.predict_proba(features_test)[:, 1]\n",
    "\n",
    "auc_roc_RFC = roc_auc_score(target_test, model_RFC_final_valid)\n",
    "\n",
    "auc_roc_RFC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é –º–æ–¥–µ–ª—å\n",
    "target_predict_constant = pd.Series([0]*len(target_test))\n",
    "target_predict_constant.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy_score –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π –º–æ–¥–µ–ª–∏: 0.791\n",
      "accuracy_score —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: 0.797\n",
      "AUC-ROC –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π –º–æ–¥–µ–ª–∏: 0.5\n",
      "AUC-ROC —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: 0.8506006107295926\n"
     ]
    }
   ],
   "source": [
    "#–°—Ä–∞–≤–Ω–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ—Å—Ç–∏ (accuracy_score) –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π\n",
    "print('accuracy_score –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π –º–æ–¥–µ–ª–∏:', accuracy_score(target_valid, target_predict_constant))\n",
    "print('accuracy_score —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏:', accuracy_score(target_test, model_RFC_final_prediction))\n",
    "#–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏–º AUC-ROC ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–¥–∞—é—â–∏–π—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è –ø–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n",
    "print('AUC-ROC –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π –º–æ–¥–µ–ª–∏:', roc_auc_score(target_valid, target_predict_constant))\n",
    "print('AUC-ROC —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏:', roc_auc_score(target_test, model_RFC_final_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–§–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª—É—á—à–µ, —á–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è –º–æ–¥–µ–ª—å ‚Äî –º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–π."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ–µ–∫—Ç–æ–º –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:\n",
    "\n",
    "- –ò–∑—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –†–∞–∑–±–∏—Ç—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É.\n",
    "- –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞. –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n",
    "- –°–∫–æ—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –±–∞–ª–ª–∞–Ω—Å –∫–ª–∞—Å—Å–∞. –ò–∑–º–µ–Ω–µ–Ω –≤–µ—Å –∫–ª–∞—Å—Å–∞.\n",
    "- –ü–æ–ª—É—á–µ–Ω–∞ —É–ª—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å. –ü—Ä–æ–≤–µ–¥–µ–Ω –ø–æ–∏—Å–∫ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n",
    "- –ü—Ä–æ–≤–µ–¥–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç.\n",
    "\n",
    "–ù–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—à–µ, —á–µ–º –Ω–∞ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ. –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —É –º–æ–¥–µ–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞:\n",
    "\n",
    "- –ü–æ–ª–Ω–æ—Ç–∞ 0.722488038277512\n",
    "- –¢–æ—á–Ω–æ—Å—Ç—å 0.5392857142857143\n",
    "- F1-–º–µ—Ä–∞ 0.6175869120654396\n",
    "- AUC-ROC 0.8527604207622839\n",
    "\n",
    "–§–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –∫–æ–Ω—Ç–∞–Ω—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é: accuracy_score –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π –º–æ–¥–µ–ª–∏: 0.796\n",
    "\n",
    "- aaccuracy_score –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π –º–æ–¥–µ–ª–∏: 0.791\n",
    "- accuracy_score —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: 0.7975\n",
    "- AUC-ROC –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π –º–æ–¥–µ–ª–∏: 0.5\n",
    "- AUC-ROC —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: 0.8493323799115837"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border:solid Chocolate 2px; padding: 40px\">\n",
    "\n",
    "**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ**\n",
    "\n",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç. \n",
    "    \n",
    "–ü–æ–Ω—è–ª, —á—Ç–æ –≤–∑—è–ª–∏ –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è. –ü—Ä–∞–≤–∏–ª—å–Ω–µ–µ –±—ã–ª–æ –±—ã –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤—Å–µ –≤ —Ü–∏–∫–ª–µ, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –í –Ω—ã–Ω–µ—à–Ω–µ–º —Ä–µ—à–µ–Ω–∏–∏ –≤–∏–¥–∏–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. \n",
    "    \n",
    "–í –æ—Å—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–µ–ª—å–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º.\n",
    "\n",
    "–ñ–µ–ª–∞—é —É–¥–∞—á–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–π —É—á–µ–±–µ!\n",
    "\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border:solid Chocolate 2px; padding: 40px\">\n",
    "\n",
    "**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–æ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ**\n",
    "\n",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞. –ö–∞–∫ —É–∂–µ —Å–∫–∞–∑–∞–ª, –ø—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Ñ–∞–π–ª–æ–º –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –Ω–µ –∏–º–µ—é –ø—Ä–∞–≤–∞ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç, –µ—Å–ª–∏ –≤ –Ω–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è. \n",
    "    \n",
    "–Ø –ø–æ—Å—Ç–∞—Ä–∞–ª—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ –≤–µ—â–∏, –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç –±–µ–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è –Ω–µ —Å–º–æ–≥—É. –ò—Ç–∞–∫:\n",
    "    \n",
    "* –ù—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ–ø—É—Å–∫–æ–≤. –ü—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–æ–π. –û—Å—Ç–∞–≤–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è –∏ —Å–≤–æ—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é.\n",
    "* –ù–∞–º –≤–∞–∂–Ω–æ –¥–ª—è –î–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π –∏ –°–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≥–ª—É–±–∏–Ω—É –≤ –æ–¥–Ω–æ–º —Å–ª—É—á–∞–µ, –≥–ª—É–±–∏–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ ‚àí –≤ –¥—Ä—É–≥–æ–º). –û—Å—Ç–∞–≤–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è.\n",
    "* –ù–∞–º –≤–∞–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ–≥–¥–∞ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥. (–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–º–µ–º –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–Ω–µ–µ).\n",
    "* –ù–µ —Å—Ç–æ–∏—Ç —Å–æ—á–µ—Ç–∞—Ç—å –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º class_weight='balanced'. –í—ã—à–µ –æ–±—ä—è—Å–Ω–∏–ª, –ø–æ—á–µ–º—É.\n",
    "* –õ–æ–≥–∏—á–Ω–æ –±—É–¥–µ—Ç –≤–∑—è—Ç—å –≤ —Ç–µ—Å—Ç —Ç—É –º–æ–¥–µ–ª—å –∏ —Å —Ç–µ–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –º–æ–¥–µ–ª—å —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–∫–∞–∂–µ—Ç—Å—è –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ f1-–º–µ—Ä—ã –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ. –ù–∞ —Ç–µ—Å—Ç–µ –º—ã –¥–æ–ª–∂–Ω—ã –¥–æ—Å—Ç–∏—á—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤ 0.59 —Å —ç—Ç–∏–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã –ø–æ–π–º–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à—É—é –º–æ–¥–µ–ª—å –∏ —á—Ç–æ –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç —Å–¥–µ–ª–∞–Ω –≤–µ—Ä–Ω–æ. \n",
    "    \n",
    "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É –∏ –µ—Å–ª–∏ —Ç—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω–∞ —Å –∫–∞–∫–∏–º-–ª–∏–±–æ –∑–∞–º–µ—á–∞–Ω–∏–µ–º, —Ç–æ –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º –ø–æ–¥ –º–æ–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º. –û—Å—Ç–∞–≤—å —Å–≤–æ—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é —Ä–µ—à–µ–Ω–∏—è. –ï—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ—à—É –Ω–µ —É–¥–∞–ª—è—Ç—å –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. \n",
    "\n",
    "**–ñ–µ–ª–∞—é —É–¥–∞—á–∏ –∏ –∂–¥—É —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–µ–≤—å—é!**üòâ\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border:solid Chocolate 2px; padding: 40px\">\n",
    "\n",
    "**–û–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ –ø—Ä–æ–µ–∫—Ç—É**\n",
    "    \n",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç! –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å. –ò—Ö —Ç—ã –Ω–∞–π–¥–µ—à—å –≤ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.\n",
    "    \n",
    "**–û—Ç–º–µ—á—É –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞üöÄ**\n",
    "    \n",
    "* –•–æ—Ä–æ—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞. –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π, –ø–æ—Ä—è–¥–æ–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n",
    "* –ï—Å—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ —à–∞–≥–∞–º, –∫–æ–¥ —Å –≤—ã—Å–æ–∫–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é. \n",
    "* –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π.\n",
    "* –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ.\n",
    "    \n",
    "**–ù–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µü§î**\n",
    "    \n",
    "* –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ–ø—É—Å–∫–æ–≤.\n",
    "* –ù—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –≤—ã–±–æ—Ä–∫–∏.\n",
    "* –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ—è–º –ø–æ–¥–±–∏—Ä–∞–µ–º –≤ –∫–∞–∂–¥–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∏–∫–∏ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º –∏ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –±–µ–∑ —É—á–µ—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞. –ü–æ–¥–±–∏—Ä–∞–µ–º —Å—Ä–∞–∑—É.\n",
    "* –í —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–∂–µ —Å–º–æ—Ç—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–¥–±–æ—Ä–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ. –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∏–∂–µ.\n",
    "* –≠—Ç–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è —è —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞–ª –ø–æ —Ö–æ–¥—É –ø—Ä–æ–µ–∫—Ç–∞.\n",
    "    \n",
    "**–ñ–µ–ª–∞—é —É–¥–∞—á–∏ –∏ –∂–¥—É —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–µ–≤—å—é!**üòâ\n",
    "    \n",
    "    \n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ü–æ—Å—Ç–∞–≤—å—Ç–µ 'x' –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ Shift+Enter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- [x]  Jupyter Notebook –æ—Ç–∫—Ä—ã—Ç\n",
    "- [x]  –í–µ—Å—å –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫\n",
    "- [x]  –Ø—á–µ–π–∫–∏ —Å –∫–æ–¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n",
    "- [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 1: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã\n",
    "- [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 2: –∑–∞–¥–∞—á–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞\n",
    "    - [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤\n",
    "    - [x]  –ò–∑—É—á–µ–Ω—ã –º–æ–¥–µ–ª–∏ –±–µ–∑ —É—á—ë—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞\n",
    "    - [x]  –ù–∞–ø–∏—Å–∞–Ω—ã –≤—ã–≤–æ–¥—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n",
    "- [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 3: —É—á—Ç—ë–Ω –¥–∏—Å–±–∞–ª–∞–Ω—Å\n",
    "    - [x]  –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º\n",
    "    - [x]  –ù–∞–ø–∏—Å–∞–Ω—ã –≤—ã–≤–æ–¥—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n",
    "- [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 4: –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n",
    "- [x]  –£–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å *F1*-–º–µ—Ä—ã –Ω–µ –º–µ–Ω–µ–µ 0.59\n",
    "- [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ *AUC-ROC*"
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 1344,
    "start_time": "2023-03-23T18:52:26.577Z"
   },
   {
    "duration": 345,
    "start_time": "2023-03-23T18:52:44.461Z"
   },
   {
    "duration": 15,
    "start_time": "2023-03-23T18:52:57.862Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-23T18:53:16.919Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-23T18:53:34.542Z"
   },
   {
    "duration": 6,
    "start_time": "2023-03-23T18:53:47.653Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-23T18:54:09.592Z"
   },
   {
    "duration": 18,
    "start_time": "2023-03-23T18:54:33.742Z"
   },
   {
    "duration": 12,
    "start_time": "2023-03-23T18:55:55.091Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-23T18:56:16.973Z"
   },
   {
    "duration": 624,
    "start_time": "2023-03-23T18:56:47.557Z"
   },
   {
    "duration": 26993,
    "start_time": "2023-03-23T18:58:02.063Z"
   },
   {
    "duration": 7163,
    "start_time": "2023-03-23T18:58:29.058Z"
   },
   {
    "duration": 49,
    "start_time": "2023-03-23T18:58:36.222Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-23T18:58:36.273Z"
   },
   {
    "duration": 190,
    "start_time": "2023-03-23T18:58:36.278Z"
   },
   {
    "duration": 13,
    "start_time": "2023-03-23T18:58:36.470Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-23T18:58:36.485Z"
   },
   {
    "duration": 6,
    "start_time": "2023-03-23T18:58:36.494Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-23T18:58:36.501Z"
   },
   {
    "duration": 15,
    "start_time": "2023-03-23T18:58:36.508Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-23T18:59:34.496Z"
   },
   {
    "duration": 590,
    "start_time": "2023-03-23T19:00:10.580Z"
   },
   {
    "duration": 780,
    "start_time": "2023-03-23T19:00:56.715Z"
   },
   {
    "duration": 426,
    "start_time": "2023-03-23T19:02:03.844Z"
   },
   {
    "duration": 13,
    "start_time": "2023-03-23T19:02:20.823Z"
   },
   {
    "duration": 396,
    "start_time": "2023-03-23T19:02:29.971Z"
   },
   {
    "duration": 13,
    "start_time": "2023-03-23T19:02:48.817Z"
   },
   {
    "duration": 637,
    "start_time": "2023-03-23T19:02:57.532Z"
   },
   {
    "duration": 797,
    "start_time": "2023-03-23T19:03:33.332Z"
   },
   {
    "duration": 100033,
    "start_time": "2023-03-23T19:04:05.243Z"
   },
   {
    "duration": 65176,
    "start_time": "2023-03-23T19:05:45.278Z"
   },
   {
    "duration": 3596,
    "start_time": "2023-03-23T19:09:19.209Z"
   },
   {
    "duration": 37828,
    "start_time": "2023-03-23T19:09:36.804Z"
   },
   {
    "duration": 33177,
    "start_time": "2023-03-23T19:10:16.140Z"
   },
   {
    "duration": 7786,
    "start_time": "2023-03-23T19:11:03.040Z"
   },
   {
    "duration": 99,
    "start_time": "2023-03-23T19:11:49.756Z"
   },
   {
    "duration": 8733,
    "start_time": "2023-03-23T19:12:09.167Z"
   },
   {
    "duration": 1496,
    "start_time": "2023-03-24T13:43:49.775Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T13:44:11.034Z"
   },
   {
    "duration": 107,
    "start_time": "2023-03-24T13:46:55.133Z"
   },
   {
    "duration": 9,
    "start_time": "2023-03-24T13:47:19.411Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T13:47:33.463Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T13:47:34.032Z"
   },
   {
    "duration": 99,
    "start_time": "2023-03-24T13:47:34.487Z"
   },
   {
    "duration": 34,
    "start_time": "2023-03-24T13:47:35.115Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T13:52:01.799Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T13:52:14.693Z"
   },
   {
    "duration": 37,
    "start_time": "2023-03-24T13:52:20.264Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T13:52:27.545Z"
   },
   {
    "duration": 40,
    "start_time": "2023-03-24T13:52:28.699Z"
   },
   {
    "duration": 12,
    "start_time": "2023-03-24T13:52:37.407Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-24T13:52:45.333Z"
   },
   {
    "duration": 112,
    "start_time": "2023-03-24T13:53:02.009Z"
   },
   {
    "duration": 39,
    "start_time": "2023-03-24T13:53:04.511Z"
   },
   {
    "duration": 10,
    "start_time": "2023-03-24T13:53:12.824Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T13:53:40.377Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T13:53:46.254Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-24T13:54:50.036Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T13:55:18.945Z"
   },
   {
    "duration": 17,
    "start_time": "2023-03-24T13:55:29.761Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T13:56:08.210Z"
   },
   {
    "duration": 6,
    "start_time": "2023-03-24T13:56:39.193Z"
   },
   {
    "duration": 6,
    "start_time": "2023-03-24T13:56:46.537Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T13:58:20.148Z"
   },
   {
    "duration": 13,
    "start_time": "2023-03-24T13:59:55.685Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T14:00:04.409Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-24T14:00:14.280Z"
   },
   {
    "duration": 20,
    "start_time": "2023-03-24T14:00:22.005Z"
   },
   {
    "duration": 15,
    "start_time": "2023-03-24T14:00:30.098Z"
   },
   {
    "duration": 15,
    "start_time": "2023-03-24T14:00:37.341Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T14:01:05.754Z"
   },
   {
    "duration": 302,
    "start_time": "2023-03-24T14:01:13.572Z"
   },
   {
    "duration": 7,
    "start_time": "2023-03-24T14:01:27.782Z"
   },
   {
    "duration": 89,
    "start_time": "2023-03-24T14:01:34.584Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T14:03:49.283Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T14:03:57.203Z"
   },
   {
    "duration": 801,
    "start_time": "2023-03-24T14:04:03.878Z"
   },
   {
    "duration": 668,
    "start_time": "2023-03-24T14:04:27.365Z"
   },
   {
    "duration": 703,
    "start_time": "2023-03-24T14:04:35.855Z"
   },
   {
    "duration": 7,
    "start_time": "2023-03-24T14:04:43.002Z"
   },
   {
    "duration": 49,
    "start_time": "2023-03-24T14:04:51.730Z"
   },
   {
    "duration": 38,
    "start_time": "2023-03-24T14:05:15.487Z"
   },
   {
    "duration": 7,
    "start_time": "2023-03-24T14:05:29.908Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-24T14:05:37.692Z"
   },
   {
    "duration": 95,
    "start_time": "2023-03-24T14:05:45.787Z"
   },
   {
    "duration": 24,
    "start_time": "2023-03-24T14:06:01.025Z"
   },
   {
    "duration": 18,
    "start_time": "2023-03-24T14:06:08.359Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-24T14:06:14.758Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-24T14:06:21.041Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T14:06:28.018Z"
   },
   {
    "duration": 136,
    "start_time": "2023-03-24T14:06:36.155Z"
   },
   {
    "duration": 302,
    "start_time": "2023-03-24T14:06:44.097Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T14:07:24.375Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T14:07:30.904Z"
   },
   {
    "duration": 9,
    "start_time": "2023-03-24T14:07:39.211Z"
   },
   {
    "duration": 73,
    "start_time": "2023-03-24T14:07:45.006Z"
   },
   {
    "duration": 7,
    "start_time": "2023-03-24T14:07:53.993Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-24T14:08:00.730Z"
   },
   {
    "duration": 10,
    "start_time": "2023-03-24T14:08:10.596Z"
   },
   {
    "duration": 88,
    "start_time": "2023-03-24T14:08:17.268Z"
   },
   {
    "duration": 265,
    "start_time": "2023-03-24T14:08:37.059Z"
   },
   {
    "duration": 334,
    "start_time": "2023-03-24T14:08:43.946Z"
   },
   {
    "duration": 41,
    "start_time": "2023-03-24T14:09:14.692Z"
   },
   {
    "duration": 7,
    "start_time": "2023-03-24T14:09:20.309Z"
   },
   {
    "duration": 266,
    "start_time": "2023-03-24T14:09:27.225Z"
   },
   {
    "duration": 20,
    "start_time": "2023-03-24T14:09:36.075Z"
   },
   {
    "duration": 103,
    "start_time": "2023-03-24T14:09:42.669Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-24T14:09:48.486Z"
   },
   {
    "duration": 261,
    "start_time": "2023-03-24T14:12:11.503Z"
   },
   {
    "duration": 21,
    "start_time": "2023-03-24T14:12:18.222Z"
   },
   {
    "duration": 18,
    "start_time": "2023-03-24T14:12:27.224Z"
   },
   {
    "duration": 6,
    "start_time": "2023-03-24T14:13:00.029Z"
   },
   {
    "duration": 9,
    "start_time": "2023-03-24T14:13:07.347Z"
   },
   {
    "duration": 50,
    "start_time": "2023-03-24T18:03:17.956Z"
   },
   {
    "duration": 1743,
    "start_time": "2023-03-24T18:03:24.608Z"
   },
   {
    "duration": 93,
    "start_time": "2023-03-24T18:03:26.353Z"
   },
   {
    "duration": 18,
    "start_time": "2023-03-24T18:03:26.448Z"
   },
   {
    "duration": 16,
    "start_time": "2023-03-24T18:03:26.468Z"
   },
   {
    "duration": 52,
    "start_time": "2023-03-24T18:03:26.486Z"
   },
   {
    "duration": 13,
    "start_time": "2023-03-24T18:03:26.786Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:03:28.136Z"
   },
   {
    "duration": 6,
    "start_time": "2023-03-24T18:03:29.881Z"
   },
   {
    "duration": 20,
    "start_time": "2023-03-24T18:03:34.118Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T18:03:35.590Z"
   },
   {
    "duration": 19,
    "start_time": "2023-03-24T18:03:35.891Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T18:03:38.464Z"
   },
   {
    "duration": 7,
    "start_time": "2023-03-24T18:03:40.337Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-24T18:03:40.553Z"
   },
   {
    "duration": 6,
    "start_time": "2023-03-24T18:03:40.976Z"
   },
   {
    "duration": 12,
    "start_time": "2023-03-24T18:03:41.603Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:03:41.837Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-24T18:03:42.225Z"
   },
   {
    "duration": 28,
    "start_time": "2023-03-24T18:03:42.639Z"
   },
   {
    "duration": 19,
    "start_time": "2023-03-24T18:03:43.077Z"
   },
   {
    "duration": 22,
    "start_time": "2023-03-24T18:03:43.536Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T18:03:44.877Z"
   },
   {
    "duration": 280,
    "start_time": "2023-03-24T18:03:45.344Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-24T18:03:46.307Z"
   },
   {
    "duration": 96,
    "start_time": "2023-03-24T18:03:46.840Z"
   },
   {
    "duration": 74,
    "start_time": "2023-03-24T18:04:39.440Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T18:04:41.873Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:04:42.916Z"
   },
   {
    "duration": 993,
    "start_time": "2023-03-24T18:04:44.629Z"
   },
   {
    "duration": 853,
    "start_time": "2023-03-24T18:04:45.624Z"
   },
   {
    "duration": 10,
    "start_time": "2023-03-24T18:04:46.479Z"
   },
   {
    "duration": 89,
    "start_time": "2023-03-24T18:04:46.491Z"
   },
   {
    "duration": 52,
    "start_time": "2023-03-24T18:04:46.582Z"
   },
   {
    "duration": 10,
    "start_time": "2023-03-24T18:04:47.697Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-24T18:04:48.083Z"
   },
   {
    "duration": 27,
    "start_time": "2023-03-24T18:04:50.250Z"
   },
   {
    "duration": 10,
    "start_time": "2023-03-24T18:04:50.469Z"
   },
   {
    "duration": 12,
    "start_time": "2023-03-24T18:04:50.781Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T18:04:51.100Z"
   },
   {
    "duration": 71,
    "start_time": "2023-03-24T18:05:19.833Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T18:07:50.532Z"
   },
   {
    "duration": 783,
    "start_time": "2023-03-24T18:08:18.340Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:08:57.291Z"
   },
   {
    "duration": 43,
    "start_time": "2023-03-24T18:08:57.808Z"
   },
   {
    "duration": 14,
    "start_time": "2023-03-24T18:08:57.984Z"
   },
   {
    "duration": 14,
    "start_time": "2023-03-24T18:08:58.137Z"
   },
   {
    "duration": 43,
    "start_time": "2023-03-24T18:08:58.304Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-24T18:08:58.473Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:08:58.803Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:08:59.286Z"
   },
   {
    "duration": 15,
    "start_time": "2023-03-24T18:09:00.147Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:09:00.480Z"
   },
   {
    "duration": 26,
    "start_time": "2023-03-24T18:09:00.634Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:09:00.999Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:09:01.485Z"
   },
   {
    "duration": 6,
    "start_time": "2023-03-24T18:09:01.670Z"
   },
   {
    "duration": 7,
    "start_time": "2023-03-24T18:09:01.857Z"
   },
   {
    "duration": 13,
    "start_time": "2023-03-24T18:09:02.899Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T18:09:03.284Z"
   },
   {
    "duration": 9,
    "start_time": "2023-03-24T18:09:03.485Z"
   },
   {
    "duration": 24,
    "start_time": "2023-03-24T18:09:03.705Z"
   },
   {
    "duration": 20,
    "start_time": "2023-03-24T18:09:03.894Z"
   },
   {
    "duration": 18,
    "start_time": "2023-03-24T18:09:04.098Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:09:05.055Z"
   },
   {
    "duration": 310,
    "start_time": "2023-03-24T18:09:05.408Z"
   },
   {
    "duration": 7,
    "start_time": "2023-03-24T18:09:05.881Z"
   },
   {
    "duration": 80,
    "start_time": "2023-03-24T18:09:06.069Z"
   },
   {
    "duration": 3,
    "start_time": "2023-03-24T18:09:06.578Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:09:06.745Z"
   },
   {
    "duration": 809,
    "start_time": "2023-03-24T18:09:06.913Z"
   },
   {
    "duration": 918,
    "start_time": "2023-03-24T18:09:07.726Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-24T18:09:08.646Z"
   },
   {
    "duration": 70,
    "start_time": "2023-03-24T18:09:08.657Z"
   },
   {
    "duration": 40,
    "start_time": "2023-03-24T18:09:08.729Z"
   },
   {
    "duration": 9,
    "start_time": "2023-03-24T18:09:08.771Z"
   },
   {
    "duration": 14,
    "start_time": "2023-03-24T18:09:08.782Z"
   },
   {
    "duration": 24,
    "start_time": "2023-03-24T18:09:08.887Z"
   },
   {
    "duration": 46,
    "start_time": "2023-03-24T18:09:09.076Z"
   },
   {
    "duration": 13,
    "start_time": "2023-03-24T18:09:09.377Z"
   },
   {
    "duration": 4,
    "start_time": "2023-03-24T18:09:09.589Z"
   },
   {
    "duration": 837,
    "start_time": "2023-03-24T18:09:09.802Z"
   },
   {
    "duration": 899,
    "start_time": "2023-03-24T18:11:29.301Z"
   },
   {
    "duration": 7,
    "start_time": "2023-03-24T18:11:32.116Z"
   },
   {
    "duration": 5,
    "start_time": "2023-03-24T18:11:33.002Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-24T18:11:36.899Z"
   },
   {
    "duration": 8,
    "start_time": "2023-03-24T18:25:36.573Z"
   },
   {
    "duration": 12,
    "start_time": "2023-03-24T18:25:37.096Z"
   },
   {
    "duration": 11,
    "start_time": "2023-03-24T18:25:38.514Z"
   },
   {
    "duration": 85,
    "start_time": "2023-03-24T18:25:41.332Z"
   },
   {
    "duration": 251,
    "start_time": "2023-03-24T18:25:43.577Z"
   },
   {
    "duration": 503,
    "start_time": "2023-03-24T18:25:43.830Z"
   },
   {
    "duration": 46,
    "start_time": "2023-03-24T18:25:46.009Z"
   },
   {
    "duration": 543,
    "start_time": "2023-03-24T18:27:30.473Z"
   },
   {
    "duration": 130,
    "start_time": "2023-03-24T18:28:04.131Z"
   },
   {
    "duration": 14,
    "start_time": "2023-03-24T18:28:14.069Z"
   },
   {
    "duration": 426,
    "start_time": "2023-03-24T18:28:33.001Z"
   },
   {
    "duration": 16,
    "start_time": "2023-03-24T18:30:03.914Z"
   },
   {
    "duration": 797,
    "start_time": "2023-03-24T18:30:32.529Z"
   },
   {
    "duration": 902,
    "start_time": "2023-03-24T18:31:02.446Z"
   },
   {
    "duration": 1094,
    "start_time": "2023-03-24T18:31:11.930Z"
   },
   {
    "duration": 318,
    "start_time": "2023-03-24T18:33:10.601Z"
   },
   {
    "duration": 31,
    "start_time": "2023-03-24T18:33:10.921Z"
   },
   {
    "duration": 24,
    "start_time": "2023-03-24T18:33:11.210Z"
   },
   {
    "duration": 10,
    "start_time": "2023-03-24T18:33:12.750Z"
   },
   {
    "duration": 12,
    "start_time": "2023-03-24T18:33:12.923Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
